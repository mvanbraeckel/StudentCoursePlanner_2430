package planner;

// imports
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import univ.*;

/**
 * @author Mitchell Van Braeckel (mvanbrae@uoguelph.ca) 1002297
 * @version 26/11/2018
 * CIS2430 Assignment 2 -- Planner / Administrator Mode separate window
 */
public class AdminMode extends javax.swing.JFrame
{
    private Planner plannerFrame;
    private CourseCatalog catalogCopy;
    private HashMap<String, ArrayList<String>> tempDegKeyReqCourseList;
    
    /**
     * Creates new form AdminMode using the student passed from the original
     * @param plannerParam the original Planner frame that is hidden at the moment
     */
    public AdminMode(Planner plannerParam)
    {
        // init attributes
        plannerFrame = plannerParam;
        catalogCopy = new CourseCatalog();
        tempDegKeyReqCourseList = loadRequiredCourses("degreeList.csv"); // modify this during user stories, and write this to file if they save
        
        initComponents();
        this.setVisible(true);
        
        // add lambda-style listeners to Save and Exit menu items (created in init components)
        itmSave.addActionListener((event) -> saveAdminMode());
        
        itmExit.addActionListener((event) -> {
            JOptionPane.showMessageDialog(null, "Admin Mode Terminated",
                    "CIS*2430: Planner Assignment 2 - Admin Mode", JOptionPane.INFORMATION_MESSAGE);
            plannerFrame.setVisible(true); // make it visible again now that admin mode is over
            this.dispose(); // destroy this because admin mode is over
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMaintainCourses = new javax.swing.JPanel();
        lblSubject = new javax.swing.JLabel();
        cboSubject = new javax.swing.JComboBox<>();
        lblCode = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        lblCredit = new javax.swing.JLabel();
        txtCredit = new javax.swing.JTextField();
        lblSemester = new javax.swing.JLabel();
        cboSemester = new javax.swing.JComboBox<>();
        btnAddCourse = new javax.swing.JButton();
        btnRemCourse = new javax.swing.JButton();
        btnUpdateCourse = new javax.swing.JButton();
        txtTitle = new javax.swing.JTextField();
        txtPrereqs = new javax.swing.JTextField();
        lblPrereqs = new javax.swing.JLabel();
        lblFrameTitle = new javax.swing.JLabel();
        scrDisplay = new javax.swing.JScrollPane();
        txtADisplay = new javax.swing.JTextArea();
        btnViewDegreeList = new javax.swing.JButton();
        btnViewCourseList = new javax.swing.JButton();
        pnlMaintainDegreeMajor = new javax.swing.JPanel();
        lblRequired = new javax.swing.JLabel();
        txtMajor = new javax.swing.JTextField();
        lblMajor = new javax.swing.JLabel();
        btnAddMajor = new javax.swing.JButton();
        btnRemMajor = new javax.swing.JButton();
        btnUpdateMajor = new javax.swing.JButton();
        txtRequired = new javax.swing.JTextField();
        pnlAdminLogin = new javax.swing.JPanel();
        lblAdminPass = new javax.swing.JLabel();
        txtAdmin = new javax.swing.JTextField();
        lblAdmin = new javax.swing.JLabel();
        txtPAdminPass = new javax.swing.JPasswordField();
        btnLoginAdmin = new javax.swing.JButton();
        btnLogoutAdmin = new javax.swing.JButton();
        barMenu = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        itmSave = new javax.swing.JMenuItem();
        sepFile = new javax.swing.JPopupMenu.Separator();
        itmExit = new javax.swing.JMenuItem();
        mnuNote = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CIS*2430: Planner Assignment 2 - Admin Mode");
        setMinimumSize(new java.awt.Dimension(839, 800));

        pnlMaintainCourses.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Maintain Courses", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        pnlMaintainCourses.setEnabled(false);
        pnlMaintainCourses.setMinimumSize(new java.awt.Dimension(400, 341));

        lblSubject.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSubject.setText("Course Subject:");
        lblSubject.setEnabled(false);

        cboSubject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ACCT", "AGBU", "AGR", "AHSS", "ANSC", "ANTH", "AQUA", "ARAB", "ARTH", "ASCI", "AVC", "BADM", "BINF", "BIOC", "BIOL", "BIOM", "BIOP", "BIOT", "BOT", "BUS", "CCJP", "CDE", "CHEM", "CHIN", "CIS", "CLAS", "CLIN", "CME", "COOP", "CROP", "CRWR", "DAFL", "DAGR", "DENM", "DEQN", "DFN", "DHRT", "DTM", "DVT", "ECON", "ECS", "EDRD", "ENGG", "ENGL", "ENVB", "ENVM", "ENVS", "EQN", "EURO", "FARE", "FCSS", "FDNT", "FINA", "FOOD", "FRAN", "FREN", "FRHD", "FSQA", "GEOG", "GERM", "GERO", "GREK", "HHNS", "HISP", "HIST", "HKIN", "HORT", "HROB", "HTM", "HUMN", "IBIO", "IDEV", "IMPR", "INT", "IPS", "ISS", "ITAL", "JUST", "KIN", "LACS", "LARC", "LAT", "LEAD", "LING", "LRS", "LTS", "MATH", "MBG", "MCB", "MCM", "MCS", "MDST", "MGMT", "MICR", "MUSC", "NANO", "NEUR", "NRS", "NUTR", "OAGR", "PABI", "PATH", "PBIO", "PHIL", "PHYS", "PLNT", "POLS", "POPM", "PORT", "PSYC", "REAL", "RPD", "RST", "SART", "SCMA", "SOAN", "SOC", "SPAN", "STAT", "THST", "TOX", "TRMH", "UNIV", "VETM", "WAT", "WLU", "WMST", "XSEN", "XSHR", "ZOO" }));
        cboSubject.setToolTipText("Select the subject identifier of the course code");
        cboSubject.setEnabled(false);

        lblCode.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblCode.setText("Course Code:");
        lblCode.setEnabled(false);

        txtCode.setText("9999");
        txtCode.setToolTipText("Enter the number of the course code [1000,9999]");
        txtCode.setEnabled(false);

        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblTitle.setText("Course Title:");
        lblTitle.setEnabled(false);

        lblCredit.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblCredit.setText("Course Credit:");
        lblCredit.setEnabled(false);

        txtCredit.setText("0.0");
        txtCredit.setToolTipText("Must be a non-negative number");
        txtCredit.setEnabled(false);

        lblSemester.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSemester.setText("Semester Offered:");
        lblSemester.setEnabled(false);

        cboSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F", "W", "B" }));
        cboSemester.setToolTipText("Select the semester(s) the course is offered: F (fall), W (Winter), B (both)");
        cboSemester.setEnabled(false);

        btnAddCourse.setMnemonic('1');
        btnAddCourse.setText("Add Course to Database");
        btnAddCourse.setToolTipText("Populate all fields before clicking this to add the desired course to the database");
        btnAddCourse.setEnabled(false);
        btnAddCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCourseActionPerformed(evt);
            }
        });

        btnRemCourse.setMnemonic('2');
        btnRemCourse.setText("Remove Course from Database");
        btnRemCourse.setToolTipText("Populate Course Subject and Course Code to remove the desired course from the database");
        btnRemCourse.setEnabled(false);
        btnRemCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemCourseActionPerformed(evt);
            }
        });

        btnUpdateCourse.setMnemonic('3');
        btnUpdateCourse.setText("Update Course in Database");
        btnUpdateCourse.setToolTipText("Populate all fields before clicking this to update the desired course in the database\nNOTE: updating deletes the current course representation in the database, then replaces it with the new one");
        btnUpdateCourse.setEnabled(false);
        btnUpdateCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCourseActionPerformed(evt);
            }
        });

        txtTitle.setText("Blank");
        txtTitle.setToolTipText("Course title cannot include commas");
        txtTitle.setEnabled(false);

        txtPrereqs.setToolTipText("Enter each prerequisite course's course code with a preceding ':' so it's a colon-delimited sentence (eg. \":CIS*2430:CIS*2520\")\nNOTE: if there are no prerequisite courses, then leave completely empty");
        txtPrereqs.setEnabled(false);

        lblPrereqs.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblPrereqs.setText("Prerequisite Courses:");
        lblPrereqs.setEnabled(false);

        javax.swing.GroupLayout pnlMaintainCoursesLayout = new javax.swing.GroupLayout(pnlMaintainCourses);
        pnlMaintainCourses.setLayout(pnlMaintainCoursesLayout);
        pnlMaintainCoursesLayout.setHorizontalGroup(
            pnlMaintainCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAddCourse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnRemCourse, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
            .addComponent(btnUpdateCourse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlMaintainCoursesLayout.createSequentialGroup()
                .addGroup(pnlMaintainCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrereqs)
                    .addComponent(lblSemester, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCredit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSubject, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboSubject, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCredit, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCode)
                    .addComponent(txtTitle)
                    .addComponent(cboSemester, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPrereqs)))
        );
        pnlMaintainCoursesLayout.setVerticalGroup(
            pnlMaintainCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMaintainCoursesLayout.createSequentialGroup()
                .addGroup(pnlMaintainCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cboSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSubject))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCode)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCredit)
                    .addComponent(txtCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSemester))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainCoursesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrereqs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrereqs))
                .addGap(12, 12, 12)
                .addComponent(btnAddCourse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemCourse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateCourse))
        );

        lblFrameTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblFrameTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFrameTitle.setText("CIS*2430: Planner Assignment 2 - Admin Mode");

        txtADisplay.setEditable(false);
        txtADisplay.setColumns(20);
        txtADisplay.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        txtADisplay.setRows(5);
        txtADisplay.setMinimumSize(new java.awt.Dimension(890, 300));
        scrDisplay.setViewportView(txtADisplay);

        btnViewDegreeList.setMnemonic('w');
        btnViewDegreeList.setText("View Degree List in Database");
        btnViewDegreeList.setEnabled(false);
        btnViewDegreeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDegreeListActionPerformed(evt);
            }
        });

        btnViewCourseList.setMnemonic('q');
        btnViewCourseList.setText("View Course List in Database");
        btnViewCourseList.setEnabled(false);
        btnViewCourseList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCourseListActionPerformed(evt);
            }
        });

        pnlMaintainDegreeMajor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Maintain Degrees / Majors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        pnlMaintainDegreeMajor.setEnabled(false);
        pnlMaintainDegreeMajor.setMinimumSize(new java.awt.Dimension(400, 201));

        lblRequired.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblRequired.setText("Required Courses:");
        lblRequired.setEnabled(false);

        txtMajor.setToolTipText("Enter the name of the major here");
        txtMajor.setEnabled(false);

        lblMajor.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblMajor.setText("Major:");
        lblMajor.setEnabled(false);

        btnAddMajor.setMnemonic('d');
        btnAddMajor.setText("Add Degree/Major to Database");
        btnAddMajor.setToolTipText("Populate all fields before clicking this to add the desired degree/major with corresponding required courses to the database");
        btnAddMajor.setEnabled(false);
        btnAddMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMajorActionPerformed(evt);
            }
        });

        btnRemMajor.setMnemonic('f');
        btnRemMajor.setText("Remove Degree/Major from Database");
        btnRemMajor.setToolTipText("Removes the desired degree/major from the database using the given major");
        btnRemMajor.setEnabled(false);
        btnRemMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemMajorActionPerformed(evt);
            }
        });

        btnUpdateMajor.setMnemonic('g');
        btnUpdateMajor.setText("Update Degree/Major in Database");
        btnUpdateMajor.setToolTipText("Populate all fields before clicking this to update the desired degree/major with corresponding required courses in the database\nNOTE: updating deletes the current degree/major representation in the database, then replaces it with the new one");
        btnUpdateMajor.setEnabled(false);
        btnUpdateMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMajorActionPerformed(evt);
            }
        });

        txtRequired.setToolTipText("Enter each required course's course code with a preceding ',' so it's a comma-separated sentence (eg. \",CIS*2430,CIS*2520\")\nNOTE: if there are no required courses, then leave completely empty");
        txtRequired.setEnabled(false);

        javax.swing.GroupLayout pnlMaintainDegreeMajorLayout = new javax.swing.GroupLayout(pnlMaintainDegreeMajor);
        pnlMaintainDegreeMajor.setLayout(pnlMaintainDegreeMajorLayout);
        pnlMaintainDegreeMajorLayout.setHorizontalGroup(
            pnlMaintainDegreeMajorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnUpdateMajor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnRemMajor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
            .addComponent(btnAddMajor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlMaintainDegreeMajorLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(pnlMaintainDegreeMajorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblRequired)
                    .addComponent(lblMajor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainDegreeMajorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMajor)
                    .addComponent(txtRequired)))
        );
        pnlMaintainDegreeMajorLayout.setVerticalGroup(
            pnlMaintainDegreeMajorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMaintainDegreeMajorLayout.createSequentialGroup()
                .addGroup(pnlMaintainDegreeMajorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMajor)
                    .addComponent(txtMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainDegreeMajorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRequired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRequired))
                .addGap(12, 12, 12)
                .addComponent(btnAddMajor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemMajor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateMajor))
        );

        pnlAdminLogin.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Admin Login", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        lblAdminPass.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblAdminPass.setText("Password:");

        txtAdmin.setText("admin");
        txtAdmin.setToolTipText("Enter each required course's course code with a preceding ',' so it's a comma-separated sentence (eg. \",CIS*2430,CIS*2520\")\nNOTE: if there are no required courses, then leave completely empty");

        lblAdmin.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblAdmin.setText("Admin Name:");

        txtPAdminPass.setText("abcd1234Dm1n");

        btnLoginAdmin.setMnemonic('i');
        btnLoginAdmin.setText("Login");
        btnLoginAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginAdminActionPerformed(evt);
            }
        });

        btnLogoutAdmin.setMnemonic('o');
        btnLogoutAdmin.setText("Logout");
        btnLogoutAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAdminLoginLayout = new javax.swing.GroupLayout(pnlAdminLogin);
        pnlAdminLogin.setLayout(pnlAdminLoginLayout);
        pnlAdminLoginLayout.setHorizontalGroup(
            pnlAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminLoginLayout.createSequentialGroup()
                .addComponent(lblAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAdmin))
            .addGroup(pnlAdminLoginLayout.createSequentialGroup()
                .addComponent(lblAdminPass, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPAdminPass))
            .addGroup(pnlAdminLoginLayout.createSequentialGroup()
                .addComponent(btnLoginAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLogoutAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
        );
        pnlAdminLoginLayout.setVerticalGroup(
            pnlAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAdminLoginLayout.createSequentialGroup()
                .addGroup(pnlAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAdmin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAdminPass)
                    .addComponent(txtPAdminPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAdminLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoginAdmin)
                    .addComponent(btnLogoutAdmin)))
        );

        mnuFile.setText("File");

        itmSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        itmSave.setText("Save");
        itmSave.setToolTipText("!!! Warning !!!  ---  Saving will overwrite the current course list files and degree list files in the database  ---  !!! Warning !!!");
        itmSave.setEnabled(false);
        mnuFile.add(itmSave);
        mnuFile.add(sepFile);

        itmExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        itmExit.setText("Exit");
        mnuFile.add(itmExit);

        barMenu.add(mnuFile);

        mnuNote.setText("NOTE: to close the window, you must choose 'File' -> 'Exit' or 'Ctrl+Alt+X' hotkey");
        mnuNote.setActionCommand("NOTE: to close the window, you must choose 'File' -> 'Exit' or 'Ctrl+Alt+X' hotkey");
        mnuNote.setEnabled(false);
        barMenu.add(mnuNote);

        setJMenuBar(barMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFrameTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrDisplay)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pnlMaintainCourses, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnViewCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnViewDegreeList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnlMaintainDegreeMajor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnlAdminLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFrameTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlMaintainCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlAdminLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnlMaintainDegreeMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewCourseList, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewDegreeList, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewCourseListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCourseListActionPerformed
        // displays all the courses in the database
        String headerDivide = "====================\t==================================================\t=============\t================\t==============================\n";
        
        // prints the original full course list
        String output = "Currently, the full course list is:\n\n" + headerDivide +
                String.format("%-" + 18 + "." + 18 + "s", "Course Code") +
                "\tCourse Title\t\t\t\t\t\tCourse Credit\tSemester Offered\t" +
                String.format("%-" + 30 + "." + 30 + "s", "Prerequisite Courses") + "\n" + headerDivide;
        
        if(plannerFrame.getUser().getPlan().getDegreeProgram().getCatalog().getFullCourseList().isEmpty()) {
            output += "\nThe database does not have any courses\n\n";
        } else {
            for(Course c : plannerFrame.getUser().getPlan().getDegreeProgram().getCatalog().getFullCourseList()) {
                output += c.toString() + "\n";
            }
        }
        output += headerDivide;

        // prints the temporary admin altered full course list
        output += "\n\nIf you save, it will become:\n\n" + headerDivide +
                String.format("%-" + 18 + "." + 18 + "s", "Course Code") +
                "\tCourse Title\t\t\t\t\t\tCourse Credit\tSemester Offered\t" +
                String.format("%-" + 30 + "." + 30 + "s", "Prerequisite Courses") + "\n" + headerDivide;
        
        if(catalogCopy.getFullCourseList().isEmpty()) {
            output += "\nThe database does not have any courses\n\n";
        } else {
            for(Course c : catalogCopy.getFullCourseList()) {
                output += c.toString() + "\n";
            }
        }
        output += headerDivide;
        
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnViewCourseListActionPerformed

    private void btnViewDegreeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDegreeListActionPerformed
        // displays all the degrees in the database
        String output = "Currently, it is:\n" + "=============================\n" + printDegreeMajorList("degreeList.csv");
        if(!tempDegKeyReqCourseList.isEmpty()) {
            output += "\n\nIf you save, it will become:\n" + "=============================";
            for(String key : tempDegKeyReqCourseList.keySet()) {
                output += "\n" + key;
                for(String val : tempDegKeyReqCourseList.get(key)) {
                    // print it if it exists
                    if(!val.equals("") && !val.isEmpty()) {
                        output += "," + val;
                    }
                }
            }
        }
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnViewDegreeListActionPerformed

    // =========================================================================
    
    private void btnAddCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCourseActionPerformed
        // tries to add the course to database using given input, displays what happens to user
        String output = addCourseToDatabase();
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnAddCourseActionPerformed

    private void btnRemCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemCourseActionPerformed
        // tries to remove the course from database using given input, displays what happens to user
        String output = removeCourseFromDatabase();
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnRemCourseActionPerformed

    private void btnUpdateCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCourseActionPerformed
        // to update, the course is removed, then the new version is added
        String output = "";
        String courseCodeInput = txtCode.getText();
        
        // check if it's in the database
        if(courseCodeFoundInDatabase()) {
            // remove old, then add new
            output += removeCourseFromDatabase() + "\n";
            output += addCourseToDatabase();
        } else {
            output += "\nDid not find '" + courseCodeInput + "' in the database";
        }
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnUpdateCourseActionPerformed

    // =========================================================================
    
    private void btnAddMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMajorActionPerformed
        // tries to add the degree/major to database using given input, displays what happens to user
        String output = addDegreeToDatabase();
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnAddMajorActionPerformed

    private void btnRemMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemMajorActionPerformed
        // tries to remove the degree/major from database using given input, displays what happens to user
        String output = removeDegreeFromDatabase();
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnRemMajorActionPerformed

    private void btnUpdateMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMajorActionPerformed
        // tries to update the degree/major in the database using given input, displays what happens to user
        String output = updateDegreeInDatabase();
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnUpdateMajorActionPerformed

    // =========================================================================
    
    private void btnLoginAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginAdminActionPerformed
        // get input from user and check it
        boolean validInput = true;
        
        String password = txtPAdminPass.getText();
        
        if(!password.equals("abcd1234Dm1n") ) {
            JOptionPane.showMessageDialog(null, "Error: incorrect administrator password", getTitle(), JOptionPane.ERROR_MESSAGE);
            validInput = false;
        }
        
        // only execute if input was valid
        if(validInput) {
            // update functionality restrictions
            btnLoginAdmin.setEnabled(false);
            btnLogoutAdmin.setEnabled(true);
            setEnabledAdminInfo(false);
            setEnabledAllNotAdminInfo(true);

            txtAdmin.setEditable(false);
            txtPAdminPass.setEditable(false);
        }
    }//GEN-LAST:event_btnLoginAdminActionPerformed

    private void btnLogoutAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutAdminActionPerformed
        // update functionality restrictions
        btnLoginAdmin.setEnabled(true);
        btnLogoutAdmin.setEnabled(false);
        setEnabledAdminInfo(true);
        setEnabledAllNotAdminInfo(false);
        
        txtAdmin.setEditable(true);
        txtPAdminPass.setEditable(true);
        
        // clear fields
        txtCode.setText("9999");
        txtTitle.setText("Blank");
        txtCredit.setText("0.0");
        txtPrereqs.setText("");
        
        txtMajor.setText("");
        txtRequired.setText("");
        
        txtADisplay.setText("");
        
        // reset
        catalogCopy = new CourseCatalog();
        tempDegKeyReqCourseList = loadRequiredCourses("degreeList.csv");
    }//GEN-LAST:event_btnLogoutAdminActionPerformed

    /**
     * Does the functionality for adding a Course to the database
     * @return the output string produced by the function
     */
    public String addCourseToDatabase()
    {
        // check that the following fields filled with good data:
        // Course Subject, Course Code, Attempt Status, Attempt Grade, Attempt Type, Semester Taken
        boolean allGood = true;
        String output = "";
        
        // check course subject (always good)
        String courseCodeInput = cboSubject.getSelectedItem().toString();
        
        // check course code is [1000,9999]
        String codeInput = txtCode.getText().trim();
        if(codeInput.length() == 4 && isInteger(codeInput) && Integer.parseInt(codeInput) >= 1000) {
            courseCodeInput += "*" + codeInput;
        } else {
            allGood = false;
            output += "\nError: Add Course to Database - Course Code must be a 4-digit positive number";
        }
        
        // check title (good as long as something is there)
        String titleInput = txtTitle.getText().trim();
        if(titleInput.equals("") || titleInput.isEmpty() || titleInput.contains(",")) {
            allGood = false;
            output += "\nError: Add Course to Database - Course Title must be entered (cannot include commas)";
        }
        
        // check credit
        String creditInput = txtCredit.getText().trim();
        if(!isDouble(creditInput) || Double.parseDouble(creditInput) < 0.0) {
            allGood = false;
            output += "\nError: Add Course to Database - Course Credit must be a non-negative number";
        }
        
        // check semester offered (semester always good)
        String semesterOfferedInput = cboSemester.getSelectedItem().toString();
        
        // check prereqs (must be colon-delimited, proper course codes that are in the course list)
        // worst case scenario, it doesn't have any prerequisite courses
        String prereqsInput = txtPrereqs.getText().toUpperCase().trim();
        
        String lineSplit[] = prereqsInput.trim().split(":");
        for(String s : lineSplit) {
            s = s.trim();
        }

        // check that prereq course codes are valid
        String validPrereqs = ""; // stores the proper string of all good input prereq courses
        String codeSplit[];
        int counter = 0;
        for(int i = 0; i < lineSplit.length; i++) {
            codeSplit = lineSplit[i].trim().split("\\*"); //break code into subject and number, clear extra whitespace
            for(String s : codeSplit) {
                s = s.trim();
            }
            // load potentially altered course code back
            if(codeSplit.length > 1) {
                for(int j = 0; j < codeSplit.length; j++) {
                    if(j == 0) {
                        lineSplit[i] = codeSplit[j];
                    } else {
                        lineSplit[i] += "*" + codeSplit[j];
                    }
                }
            }

            // now, check course code (length for subject and number)
            if(codeSplit.length != 2 || codeSplit[0].length() < 3 || codeSplit[0].length() > 4 || 
                    codeSplit[1].length() != 4 || !isInteger(codeSplit[1])) {
                output += "\nError: Add Course to Database - prerequisite course code '" + lineSplit[i] + "' is invalid, will not be included";
                continue; //do not add as a prerequisite course because invalid course code format
            }

            // if reaches here, then the required course is valid, so add it to the storing list
            // check that the course exists first
            if(catalogCopy.findCourse(lineSplit[i]) != null) {
                if(counter == 0) {
                    validPrereqs += lineSplit[i];
                } else {
                    validPrereqs += ":" + lineSplit[i];
                }                        
                counter++; // accumulate since it was a good required course input
            } else {
                output += "\nError: Add Course to Database - prerequisite course '" + lineSplit[i] + "' does not exist in database, it will not be included";
            }
            
        }
        
        // default to NONE
        if(validPrereqs.equals("") || validPrereqs.isEmpty() || prereqsInput.isEmpty() || prereqsInput.equals("")) {
            validPrereqs = "NONE";
        }
        
        // only run if all fields have valid input
        if(allGood) {
            // make sure the course code isn't already in the database
            if(catalogCopy.findCourse(courseCodeInput) == null) {
                ArrayList<Course> prereqCourses = new ArrayList<>();
                String validPrereqsList[] = validPrereqs.split(":");
                // create basic prereq course list from string list of prereqs
                for(String s : validPrereqsList) {
                    prereqCourses.add(new Course(s));
                }
                Course toAdd = new Course(courseCodeInput, Double.parseDouble(creditInput), titleInput, prereqCourses, semesterOfferedInput);
                catalogCopy.getFullCourseList().add(toAdd);

                output += "\nSuccessfully added '" + courseCodeInput + "' to the database";
                
            } else {
                output += "\nSorry, the course '" + courseCodeInput + "' is already in the database" +
                        "\nCannot add '" + courseCodeInput + "' to the database since it already exists";
            }
        } else {
            output += "\nDid not add '" + courseCodeInput + "' to the database";
        }
        return output + "\n";
    }
    
    /**
     * Does the functionality for removing a Course from the database
     * @return the output string produced by the function
     */
    public String removeCourseFromDatabase()
    {
        // check that the following fields filled with good data:
        // Course Subject, Course Code
        boolean allGood = true;
        String output = "";
        
        // check course subject (always good)
        String courseCodeInput = cboSubject.getSelectedItem().toString();
        
        // check course code is [1000,9999]
        String codeInput = txtCode.getText().trim();
        if(codeInput.length() == 4 && isInteger(codeInput) && Integer.parseInt(codeInput) >= 1000) {
            courseCodeInput += "*" + codeInput;
        } else {
            allGood = false;
            output += "\nError: Remove Course from Database - Course Code must be a 4-digit positive number";
        }
        
        // only run if all fields have valid input
        if(allGood) {
            // check if it's in the database
            Course found = catalogCopy.findCourse(courseCodeInput);
            if(found == null) {
                output += "\nDid not find '" + courseCodeInput + "' in the database";
            } else {
                catalogCopy.removeCourse(found);
                output += "\nSuccessfully removed '" + courseCodeInput + "' from the database";
            }
        } else {
            output += "\nDid not remove '" + courseCodeInput + "' from the database";
        }
        return output + "\n";
    }
    
    /**
     * Does the functionality for checking if a Course is in the database (using user input)
     * @return true if course code is in the database
     */
    public boolean courseCodeFoundInDatabase()
    {
        // check that the following fields filled with good data:
        // Course Subject, Course Code
        boolean allGood = true;
        
        // check course subject (always good)
        String courseCodeInput = cboSubject.getSelectedItem().toString();
        
        // check course code is [1000,9999]
        String codeInput = txtCode.getText().trim();
        if(codeInput.length() == 4 && isInteger(codeInput) && Integer.parseInt(codeInput) >= 1000) {
            courseCodeInput += "*" + codeInput;
        } else {
            
            JOptionPane.showMessageDialog(null, "Error: Search for Course in Database - Course Code must be a 4-digit positive number",
                    getTitle(), JOptionPane.ERROR_MESSAGE);
            allGood = false;
        }
        
        // only run if all fields have valid input
        if(allGood) {
            // check if it's in the database
            Course found = catalogCopy.findCourse(courseCodeInput);
            if(found == null) {
                return false;
            } else {
                return true; // match found
            }
        } else {
            return false;
        }
    }
    
    /**
     * Does the functionality for adding a degree/major to the database
     * @return the output string produced by the function
     */
    public String addDegreeToDatabase()
    {
        // check that the following fields are filled with good data:
        // Major, Required Courses
        boolean allGood = true;
        String output = "";
        
        // check major (good as long as something is there)
        String majorInput = txtMajor.getText().toUpperCase().trim();
        if(majorInput.equals("") || majorInput.isEmpty() || majorInput.contains(",")) {
            allGood = false;
            output += "\nError: Add Degree/Major to Database - Major must be entered (cannot include commas)";
        }
        
        // check required courses (must be comma-separated, proper course codes that are in the course list)
        // worst case scenario, it doesn't have any prerequisite courses
        String requiredInput = txtRequired.getText().toUpperCase().trim();
        
        String lineSplit[] = requiredInput.trim().split(",");
        for(String s : lineSplit) {
            s = s.trim();
        }

        // check that required course codes are valid
        String validRequired = ""; // stores the proper string of all good input required courses
        String codeSplit[];
        
        for(int i = 0; i < lineSplit.length; i++) {
            codeSplit = lineSplit[i].trim().split("\\*"); //break code into subject and number, clear extra whitespace
            for(String s : codeSplit) {
                s = s.trim();
            }
            // load potentially altered course code back
            if(codeSplit.length > 1) {
                for(int j = 0; j < codeSplit.length; j++) {
                    if(j == 0) {
                        lineSplit[i] = codeSplit[j];
                    } else {
                        lineSplit[i] += "*" + codeSplit[j];
                    }
                }
            }

            // now, check course code (length for subject and number)
            if(codeSplit.length != 2 || codeSplit[0].length() < 3 || codeSplit[0].length() > 4 || 
                    codeSplit[1].length() != 4 || !isInteger(codeSplit[1])) {
                output += "\nError: Add Degree/Major to Database - required course code '" + lineSplit[i] + "' is invalid, will not be included";
                continue; //do not add as a prerequisite course because invalid course code format
            }

            // if reaches here, then the required course is valid, so add it to the storing list
            // check that the course exists first
            if(catalogCopy.findCourse(lineSplit[i]) != null) {
                validRequired += "," + lineSplit[i];
            } else {
                output += "\nError: Add Degree/Major to Database - required course '" + lineSplit[i] + "' does not exist in database, it will not be included";
            }
        }
        
        // explicitly set to blank if nothing is there
        if(validRequired.equals("") || validRequired.isEmpty() || requiredInput.isEmpty() || requiredInput.equals("")) {
            validRequired = "";
        }
        
        // only run if all fields have valid input
        if(allGood) {
            // check if it already exists first
            if(!tempDegKeyReqCourseList.containsKey(majorInput)) {
                // add it to the temp hashmap
                ArrayList<String> valList = new ArrayList<>();
                String valListArray[] = validRequired.trim().split(",");
                // load the variables and put it in the hashmap
                String key = majorInput;
                for(String s : valListArray) {
                    valList.add(s);
                }
                tempDegKeyReqCourseList.put(key, valList);
                output += "\nSuccessfully added degree '" + majorInput + "' to the database";
            } else {
                output += "\nSorry, the degree '" + majorInput + "' is already in the database" +
                        "\nCannot add degree '" + majorInput + "' to the database since it already exists";
            }
            
        } else {
            output += "\nDid not add degree '" + majorInput + "' to the database";
        }
        return output + "\n";
    }
    
    /**
     * Does the functionality for removing a degree/major from the database
     * @return the output string produced by the function
     */
    public String removeDegreeFromDatabase()
    {
        // check that the following fields are filled with good data:
        // Major
        boolean allGood = true;
        String output = "";
        
        // check major (good as long as something is there)
        String majorInput = txtMajor.getText().trim();
        if(majorInput.equals("") || majorInput.isEmpty() || majorInput.contains(",")) {
            allGood = false;
            output += "\nError: Remove Degree/Major from Database - Major must be entered (cannot include commas)";
        }
        
        // only run if all fields have valid input
        if(allGood) {
            // check if it's in the database
            boolean contains = false;
            // check if there is / find matching key
            for(String readMajor : tempDegKeyReqCourseList.keySet()) {
                if(readMajor.equals(majorInput)) {
                    tempDegKeyReqCourseList.remove(readMajor); // found match, so remove it
                    contains = true;
                    break;
                }
            }
            
            if(!contains) {
                output += "\nDid not find degree '" + majorInput + "' in the database";
            } else {
                output += "\nSuccessfully removed degree '" + majorInput + "' from the database";
            }
        } else {
            output += "\nDid not remove degree '" + majorInput + "' from the database";
        }
        return output + "\n";
    }
    
    /**
     * Does the functionality for updating a degree/major in the database
     * @return the output string produced by the function
     */
    public String updateDegreeInDatabase()
    {
        // check that the following fields are filled with good data:
        // Major, Required Courses
        boolean allGood = true;
        String output = "";
        
        // check major (good as long as something is there)
        String majorInput = txtMajor.getText().trim();
        if(majorInput.equals("") || majorInput.isEmpty() || majorInput.contains(",")) {
            allGood = false;
            output += "\nError: Update Degree/Major in Database - Major must be entered (cannot include commas)";
        }
        
        // check required courses (must be comma-separated, proper course codes that are in the course list)
        // worst case scenario, it doesn't have any prerequisite courses
        String requiredInput = txtRequired.getText().toUpperCase().trim();
        
        String lineSplit[] = requiredInput.trim().split(",");
        for(String s : lineSplit) {
            s = s.trim();
        }

        // check that required course codes are valid
        String validRequired = ""; // stores the proper string of all good input required courses
        String codeSplit[];
        
        for(int i = 0; i < lineSplit.length; i++) {
            codeSplit = lineSplit[i].trim().split("\\*"); //break code into subject and number, clear extra whitespace
            for(String s : codeSplit) {
                s = s.trim();
            }
            // load potentially altered course code back
            if(codeSplit.length > 1) {
                for(int j = 0; j < codeSplit.length; j++) {
                    if(j == 0) {
                        lineSplit[i] = codeSplit[j];
                    } else {
                        lineSplit[i] += "*" + codeSplit[j];
                    }
                }
            }

            // now, check course code (length for subject and number)
            if(codeSplit.length != 2 || codeSplit[0].length() < 3 || codeSplit[0].length() > 4 || 
                    codeSplit[1].length() != 4 || !isInteger(codeSplit[1])) {
                output += "\nError: Update Degree/Major in Database - required course code '" + lineSplit[i] + "' is invalid, will not be included";
                continue; //do not add as a prerequisite course because invalid course code format
            }

            // if reaches here, then the required course is valid, so add it to the storing list
            // check that the course exists first
            if(catalogCopy.findCourse(lineSplit[i]) != null) {
                validRequired += "," + lineSplit[i];
            } else {
                output += "\nError: Update Degree/Major in Database - required course '" + lineSplit[i] + "' does not exist in database, it will not be included";
            }
        }
        
        // explicitly set to blank if nothing is there
        if(validRequired.equals("") || validRequired.isEmpty() || requiredInput.isEmpty() || requiredInput.equals("")) {
            validRequired = "";
        }
        
        // only run if all fields have valid input
        if(allGood) {
            // check if it already exists first
            if(tempDegKeyReqCourseList.containsKey(majorInput)) {
                // add it to the temp hashmap
                ArrayList<String> valList = new ArrayList<>();
                String valListArray[] = validRequired.trim().split(",");
                // load the variables and put it in the hashmap
                String key = majorInput;
                for(String s : valListArray) {
                    valList.add(s);
                }
                tempDegKeyReqCourseList.put(key, valList);
                output += "\nSuccessfully updated degree '" + majorInput + "' to the database";
            } else {
                output += "\nSorry, the degree '" + majorInput + "' is not in the database" +
                        "\nDid not update degree '" + majorInput + "' in the database";
            }
            
        } else {
            output += "\nDid not update degree '" + majorInput + "' in the database";
        }
        return output + "\n";
    }
    
    /**
     * Saves both lists to the database by overwriting previous saved csv files
     */
    public void saveAdminMode()
    {
        String output = "";
        // overwrite courseList.csv using catalogCopy
        if(saveCourseList("courseList.csv")) {
            output += "\nSuccessfully saved the new course list to the database";
        } else {
            output += "\nDid not save the new course list to the database";
        }
        
        // overwrite degreeList.csv using tempDegKeyReqCourseList
        if(saveDegreeList("degreeList.csv")) {
            output += "\nSuccessfully saved the new degree list to the database";
            
            // update combo boxes to select degrees
            plannerFrame.getDegreeMajorComboBox().removeAllItems();
            
            for(String major : tempDegKeyReqCourseList.keySet()) {
                plannerFrame.getDegreeMajorComboBox().addItem(major);
            }
        } else {
            output += "\nDid not save the new degree list to the database";
        }
        
        txtADisplay.setText(output + "\n");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barMenu;
    private javax.swing.JButton btnAddCourse;
    private javax.swing.JButton btnAddMajor;
    private javax.swing.JButton btnLoginAdmin;
    private javax.swing.JButton btnLogoutAdmin;
    private javax.swing.JButton btnRemCourse;
    private javax.swing.JButton btnRemMajor;
    private javax.swing.JButton btnUpdateCourse;
    private javax.swing.JButton btnUpdateMajor;
    private javax.swing.JButton btnViewCourseList;
    private javax.swing.JButton btnViewDegreeList;
    private javax.swing.JComboBox<String> cboSemester;
    private javax.swing.JComboBox<String> cboSubject;
    private javax.swing.JMenuItem itmExit;
    private javax.swing.JMenuItem itmSave;
    private javax.swing.JLabel lblAdmin;
    private javax.swing.JLabel lblAdminPass;
    private javax.swing.JLabel lblCode;
    private javax.swing.JLabel lblCredit;
    private javax.swing.JLabel lblFrameTitle;
    private javax.swing.JLabel lblMajor;
    private javax.swing.JLabel lblPrereqs;
    private javax.swing.JLabel lblRequired;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuNote;
    private javax.swing.JPanel pnlAdminLogin;
    private javax.swing.JPanel pnlMaintainCourses;
    private javax.swing.JPanel pnlMaintainDegreeMajor;
    private javax.swing.JScrollPane scrDisplay;
    private javax.swing.JPopupMenu.Separator sepFile;
    private javax.swing.JTextArea txtADisplay;
    private javax.swing.JTextField txtAdmin;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtCredit;
    private javax.swing.JTextField txtMajor;
    private javax.swing.JPasswordField txtPAdminPass;
    private javax.swing.JTextField txtPrereqs;
    private javax.swing.JTextField txtRequired;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables

    /**
     * Helper method to set the enabled parameter of a group of components
     * @param tf boolean to decide if everything is enabled or not
     */
    public void setEnabledAllNotAdminInfo(boolean tf)
    {
        // menu items
        itmSave.setEnabled(tf);
        
        // maintain courses panel
        pnlMaintainCourses.setEnabled(tf);
        lblSubject.setEnabled(tf);
        cboSubject.setEnabled(tf);
        lblCode.setEnabled(tf);
        txtCode.setEnabled(tf);
        lblTitle.setEnabled(tf);
        txtTitle.setEnabled(tf);
        lblCredit.setEnabled(tf);
        txtCredit.setEnabled(tf);
        lblSemester.setEnabled(tf);
        cboSemester.setEnabled(tf);
        lblPrereqs.setEnabled(tf);
        txtPrereqs.setEnabled(tf);
        
        btnAddCourse.setEnabled(tf);
        btnRemCourse.setEnabled(tf);
        btnUpdateCourse.setEnabled(tf);
        
        btnViewCourseList.setEnabled(tf);
        
        // maintain degree/major panel
        pnlMaintainDegreeMajor.setEnabled(tf);
        lblMajor.setEnabled(tf);
        txtMajor.setEnabled(tf);
        lblRequired.setEnabled(tf);
        txtRequired.setEnabled(tf);
        
        btnAddMajor.setEnabled(tf);
        btnRemMajor.setEnabled(tf);
        btnUpdateMajor.setEnabled(tf);
        
        btnViewDegreeList.setEnabled(tf);
    }
    
    /**
     * Helper method to set the enabled parameter of a the Admin info group of components
     * @param tf boolean to decide if everything is enabled or not
     */
    public void setEnabledAdminInfo(boolean tf)
    {
        // admin login info panel
        lblAdmin.setEnabled(tf);
        txtAdmin.setEnabled(tf);
        lblAdminPass.setEnabled(tf);
        txtPAdminPass.setEnabled(tf);
    }
    
    // =========================================================================
    
    /**
     * File Read method - loads a CSV that contains the list of required courses for each degree/major and prints it
     * @param filename the name of the CSV file being read from
     * @return a String representation of the output
     * NOTE: assumes file is perfect
     */
    public static String printDegreeMajorList(String filename)
    {
        String output = "";
        int counter = 0;
        // declare variables
        boolean eof = false;
        String line = "";
        try {
            FileReader fr = new FileReader(filename);
            BufferedReader br = new BufferedReader(fr);
            eof = false;
            
            // read the entire file
            while(!eof) {
                line = br.readLine();
                // check if anything is there
                if(line == null) {
                    eof = true;
                } else {
                    if(counter != 0) {
                        output += "\n";
                    }
                    output += line;
                }
                counter++;
            } // end while loop
        } catch (IOException e) {
            output = "Error - printDegreeMajorList(" + filename + "): IOException -> " + e + "\n" + output;
            JOptionPane.showMessageDialog(null, "Errors encountered - printDegreeMajorList(" + filename + "):\n\n" + output,
                    "CIS*2430: Planner Assignment 2", JOptionPane.ERROR_MESSAGE);
        } finally {
            return output;
        }
    }
    
    // =========================================================================
    
    /**
     * Boolean method - Checks if a string is an integer
     * @param sNum the string form of the number being checked
     * @return true if it successfully parses to an integer
     */
    public static boolean isInteger(String sNum)
    {
        try {
            Integer.parseInt(sNum);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    /**
     * Boolean method - Checks if a string is a double
     * @param sNum the string form of the number being checked
     * @return true if it successfully parses to a double
     */
    public static boolean isDouble(String sNum)
    {
        try {
            Double.parseDouble(sNum);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    // =========================================================================
    
    /**
     * File Read method - loads a CSV that contains the list of required courses for each major
     * @param filename the name of the CSV file being read from
     * @return a HashMap with a String key of the Major, and a value of an ArrayList of Strings of required course codes
     */
    public static HashMap<String, ArrayList<String>> loadRequiredCourses(String filename)
    {
        HashMap<String, ArrayList<String>> degKeyReqCourseList = new HashMap<>();
        
        boolean encounteredErrors = false;
        String output = "";
        // declare variables
        boolean eof = false;
        boolean validInput = true;
        String line = "";
        String key, value;
        String lineSplit[];
        try {
            FileReader fr = new FileReader(filename);
            BufferedReader br = new BufferedReader(fr);
            eof = false;
            
            // read the entire file
            while(!eof) {
                line = br.readLine();
                // check if anything is there
                if(line == null) {
                    eof = true;
                } else {
                    validInput = true;
                    lineSplit = line.trim().split(",");
                    for(String s : lineSplit) {
                        s = s.trim();
                    }
                    
                    // check major
                    if(lineSplit[0].equals("")) {
                        output += "\nError: loadRequiredCourses(" + filename + "): major must exist";
                        encounteredErrors = true;
                        validInput = false;
                        continue; // do not add because it's invalid
                    } else {
                        key = lineSplit[0];
                    }
                    
                    // check that course codes are valid
                    String validRequired = ""; // stores a string to be split of all good input prereq courses
                    String codeSplit[];
                    int counter = 0;
                    for(int i = 1; i < lineSplit.length; i++) {
                        codeSplit = lineSplit[i].trim().split("\\*"); //break code into subject and number, clear extra whitespace
                        for(String s : codeSplit) {
                            s = s.trim();
                        }
                        // load potentially altered course code back
                        if(codeSplit.length > 1) {
                            for(int j = 0; j < codeSplit.length; j++) {
                                if(j == 0) {
                                    lineSplit[i] = codeSplit[j];
                                } else {
                                    lineSplit[i] += "*" + codeSplit[j];
                                }
                            }
                        }
                        
                        // now, check course code (length for subject and number)
                        if(codeSplit.length != 2 || codeSplit[0].length() < 3 || codeSplit[0].length() > 4 || 
                                codeSplit[1].length() != 4 || !isInteger(codeSplit[1])) {
                            output += "\nError: loadRequiredCourses(" + filename + "): required course code '" + lineSplit[i] + "' is invalid";
                            encounteredErrors = true;
                            validInput = false;
                            continue; //do not add as a prerequisite course because invalid course code format
                        }
                        
                        // if reaches here, then the required course is valid, so add it to the storing list
                        if(counter == 0) {
                            validRequired += lineSplit[i];
                        } else {
                            validRequired += ":" + lineSplit[i];
                        }                        
                        counter++; // accumulate since it was a good required course input
                    }
                    String validRequiredSplit[] = validRequired.split(":"); // break the good input required courses into separate course codes
                   
                    // if the input line was good, add it to the HashMap
                    if(validInput) {
                        // create array list to add
                        ArrayList<String> reqCourses = new ArrayList<>();
                        for(String reqCourseCode : validRequiredSplit) {
                            reqCourses.add(reqCourseCode);
                        }
                        degKeyReqCourseList.put(key, reqCourses); // add it to the map
                    }
                    
                } // end else
            } // end while loop
        } catch (IOException e) {
            output = "Error - loadRequiredCourses(" + filename + "): IOException -> " + e + "\n" + output;
            JOptionPane.showMessageDialog(null, "Errors encountered - loadRequiredCourses(" + filename + "):\n\n" + output,
                    "CIS*2430: Planner Assignment 2", JOptionPane.ERROR_MESSAGE);
        }
        if(encounteredErrors) {
            JOptionPane.showMessageDialog(null, "Errors encountered - loadRequiredCourses(" + filename + "):\n" + output,
                    "CIS*2430: Planner Assignment 2", JOptionPane.ERROR_MESSAGE);
        }
        return degKeyReqCourseList;
    }

    /**
     * File Write method - saves a CSV (by overwriting its old version) that contains the new full course list
     * @param filename the name of the CSV file being written to
     * @return true if it worked
     */
    public boolean saveCourseList(String filename)
    {
        // declare needed variables
        String line;
        int prereqCounter;
        
        try {
            FileWriter fw = new FileWriter(filename);
            BufferedWriter bw = new BufferedWriter(fw);
            
            // write every course to the file
            for(Course c : catalogCopy.getFullCourseList()) {
                // create line with the csv file format
                line = c.getCourseCode() + "," + c.getCourseCredit() + "," + c.getCourseTitle() + "," + c.getSemesterOffered() + ",";
                prereqCounter = 0;
                for(Course prereq : c.getPrerequisites()) {
                    if(prereqCounter != 0) {
                        line += ":";
                    }
                    line += prereq.getCourseCode();
                    prereqCounter++;
                }
                line += "\n";
                bw.write(line); // write the line to the file
            }
            
            bw.close(); //closes stream
            return true;
            
        } catch(IOException ex) {
            JOptionPane.showMessageDialog(null, "Error saving new course list to '" + filename + "': -> " + ex.toString(),
                    getTitle(), JOptionPane.ERROR_MESSAGE);
            return false;
        } // end try-catch abilities
    }
    
    /**
     * File Write method - saves a CSV (by overwriting its old version) that contains the new degree/major list with required courses
     * @param filename the name of the CSV file being written to
     * @return true if it worked properly
     */
    public boolean saveDegreeList(String filename)
    {
        // declare needed variables
        String line;
        String output = "";
        
        // first, make sure all listed required courses exist in the database
        boolean allExist = true;
        
        // loop through all degree/majors, and all their required courses
        for(String key : tempDegKeyReqCourseList.keySet()) {
            for(String val : tempDegKeyReqCourseList.get(key)) {
                // check that it exists in the database (tried to save new catalog full course list before this)
                // make sure val is actually something first
                if(!val.equals("") && !val.isEmpty()) {
                    if(catalogCopy.findCourse(val) == null) {
                        allExist = false; // did not find it in the database
                        output += "\n" + val;
                    }
                }
            }
        }
        
        // if there were any required courses that don't exists in the database, display err msg prompt and exit (return false, it didn't work)
        if(!allExist) {
            JOptionPane.showMessageDialog(null, "Error: the following required courses don't exist in the database:\n" + output,
                    getTitle(), JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        // else 
        try {
            FileWriter fw = new FileWriter(filename);
            BufferedWriter bw = new BufferedWriter(fw);
            
            // write every course to the file
            for(String key : tempDegKeyReqCourseList.keySet()) {
                // create line with csv file format
                line = key;
                for(String val : tempDegKeyReqCourseList.get(key)) {
                    // make sure this actually exists first
                    if(!val.equals("") && !val.isEmpty()) {
                        line += "," + val;
                    }
                }
                line += "\n";
                bw.write(line); // write the line to the file
            }
            
            bw.close(); //closes stream
            return true;
            
        } catch(IOException ex) {
            JOptionPane.showMessageDialog(null, "Error - saving new degree/major list to '" + filename + "': " + ex.toString(),
                    getTitle(), JOptionPane.ERROR_MESSAGE);
            return false;
        } // end try-catch abilities
    }
}
