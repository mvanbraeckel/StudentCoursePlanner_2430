package planner;

// imports
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import univ.*;

/**
 * @author Mitchell Van Braeckel (mvanbrae@uoguelph.ca) 1002297
 * @version 24/11/2018
 * CIS2430 Assignment 2 -- Planner
 * --> has a main method and can:
 */
public class Planner extends javax.swing.JFrame
{
    // global variables
    private Student theUser;
    private AdminMode adminFrame;
    
    /**
     * Creates the JFrame form of the GUI
     */
    public Planner()
    {
        theUser = new Student();
        initComponents();
        
        // create Save menu item
        /*javax.swing.JMenuItem mnuSave = new javax.swing.JMenuItem("Save");
        mnuSave.setToolTipText("Save planner.");
        mnuSave.addActionListener((event) -> JOptionPane.showMessageDialog(null, "tester to save -menu",
                "CIS*2430 A2", JOptionPane.INFORMATION_MESSAGE));
        barMenu.add(mnuSave);
        // create Exit menu item
        javax.swing.JMenuItem mnuExit = new javax.swing.JMenuItem("Exit");
        mnuExit.setToolTipText("Exit planner.");
        mnuExit.addActionListener((event) -> System.exit(0));
        barMenu.add(mnuExit);*/
        
        // panel for Save and Exit buttons
        pnlSaveExit.setLayout(new java.awt.GridLayout(1,2));
        
        btnSave = new javax.swing.JButton();
        pnlSaveExit.add(btnSave);
        btnSave.setText("Save");
        btnSave.addActionListener(new SaveButtonListener(btnSave));
        btnSave.setEnabled(false);
        
        btnExit = new javax.swing.JButton();
        pnlSaveExit.add(btnExit);
        btnExit.setText("Exit");
        btnExit.addActionListener((event) -> System.exit(0));
        
        // add lambda-style listeners to Save and Exit menu items (created in init components)
        itmSave.addActionListener((event) -> {
            JOptionPane.showMessageDialog(null, "Your progress has been saved.\n"
                    + theUser.getLastName() + theUser.getFirstName() + theUser.getStudentNumber() + ".bin"
                    , getTitle(), JOptionPane.INFORMATION_MESSAGE);
            theUser.saveState(theUser.getLastName() + theUser.getFirstName() + theUser.getStudentNumber() + ".bin");
        });
        itmExit.addActionListener((event) -> System.exit(0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        pnlUserInfo = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblStudentID = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        txtStudentID = new javax.swing.JTextField();
        btnLogin = new javax.swing.JButton();
        btnLoadSave = new javax.swing.JButton();
        btnStartOver = new javax.swing.JButton();
        pnlSaveExit = new javax.swing.JPanel();
        pnlMaintainAttempts = new javax.swing.JPanel();
        lblSubject = new javax.swing.JLabel();
        cboSubject = new javax.swing.JComboBox<>();
        lblCode = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        cboStatus = new javax.swing.JComboBox<>();
        lblGrade = new javax.swing.JLabel();
        txtGrade = new javax.swing.JTextField();
        lblType = new javax.swing.JLabel();
        cboType = new javax.swing.JComboBox<>();
        lblSemester = new javax.swing.JLabel();
        cboSemester = new javax.swing.JComboBox<>();
        txtSemesterYear = new javax.swing.JTextField();
        btnAddToTranscript = new javax.swing.JButton();
        btnUpdateGrade = new javax.swing.JButton();
        btnRemFromTranscript = new javax.swing.JButton();
        btnAddToPlanned = new javax.swing.JButton();
        btnRemFromPlanned = new javax.swing.JButton();
        scrDisplay = new javax.swing.JScrollPane();
        txtADisplay = new javax.swing.JTextArea();
        pnlDegreeMajorRequirements = new javax.swing.JPanel();
        cboDegreeMajor = new javax.swing.JComboBox<>();
        btnSelectDegreeMajor = new javax.swing.JButton();
        btnMeetsRequirements = new javax.swing.JButton();
        barMenu = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        itmSave = new javax.swing.JMenuItem();
        sepFile = new javax.swing.JPopupMenu.Separator();
        itmExit = new javax.swing.JMenuItem();
        mnuOptions = new javax.swing.JMenu();
        itmAdmin = new javax.swing.JMenuItem();
        mnuView = new javax.swing.JMenu();
        mnuListMissingReqCourses = new javax.swing.JMenu();
        itmLMRCTranscript = new javax.swing.JMenuItem();
        itmLMRCAll = new javax.swing.JMenuItem();
        mnuListPrereqCourses = new javax.swing.JMenu();
        itmLPCReqCourses = new javax.swing.JMenuItem();
        itmLPCPlanned = new javax.swing.JMenuItem();
        sepView = new javax.swing.JPopupMenu.Separator();
        itmNumCredits = new javax.swing.JMenuItem();
        itmGPA = new javax.swing.JMenuItem();
        itmViewPlanBySemester = new javax.swing.JMenuItem();
        mnuDisplay = new javax.swing.JMenu();
        itmDisplayProfile = new javax.swing.JMenuItem();
        itmDisplayTranscript = new javax.swing.JMenuItem();
        itmDisplayPlannedList = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CIS*2430: Planner Assignment 2");
        setMinimumSize(new java.awt.Dimension(730, 785));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("CIS*2430: Planner Assignment 2");

        pnlUserInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User Login Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        btnLogout.setMnemonic('o');
        btnLogout.setText("Logout");
        btnLogout.setEnabled(false);
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        lblFirstName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblFirstName.setText("First Name:");

        lblLastName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblLastName.setText("Last Name:");

        lblStudentID.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblStudentID.setText("Student ID:");

        txtFirstName.setText("Maerceci");

        txtLastName.setText("Enoc");

        txtStudentID.setText("1009876");
        txtStudentID.setToolTipText("Must be a positive number");

        btnLogin.setMnemonic('i');
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnLoadSave.setMnemonic('l');
        btnLoadSave.setText("Load Save");
        btnLoadSave.setEnabled(false);
        btnLoadSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadSaveActionPerformed(evt);
            }
        });

        btnStartOver.setMnemonic('k');
        btnStartOver.setText("Start Over");
        btnStartOver.setEnabled(false);
        btnStartOver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartOverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlUserInfoLayout = new javax.swing.GroupLayout(pnlUserInfo);
        pnlUserInfo.setLayout(pnlUserInfoLayout);
        pnlUserInfoLayout.setHorizontalGroup(
            pnlUserInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUserInfoLayout.createSequentialGroup()
                .addGroup(pnlUserInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlUserInfoLayout.createSequentialGroup()
                        .addComponent(lblFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlUserInfoLayout.createSequentialGroup()
                        .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlUserInfoLayout.createSequentialGroup()
                        .addComponent(lblStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlUserInfoLayout.createSequentialGroup()
                .addGroup(pnlUserInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnStartOver, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUserInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        pnlUserInfoLayout.setVerticalGroup(
            pnlUserInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUserInfoLayout.createSequentialGroup()
                .addGroup(pnlUserInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUserInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUserInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudentID)
                    .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUserInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogout)
                    .addComponent(btnLogin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlUserInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadSave)
                    .addComponent(btnStartOver)))
        );

        pnlSaveExit.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout pnlSaveExitLayout = new javax.swing.GroupLayout(pnlSaveExit);
        pnlSaveExit.setLayout(pnlSaveExitLayout);
        pnlSaveExitLayout.setHorizontalGroup(
            pnlSaveExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );
        pnlSaveExitLayout.setVerticalGroup(
            pnlSaveExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        pnlMaintainAttempts.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Maintain Course Attempts", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        pnlMaintainAttempts.setEnabled(false);

        lblSubject.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSubject.setText("Course Subject:");
        lblSubject.setEnabled(false);

        cboSubject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ACCT", "AGBU", "AGR", "AHSS", "ANSC", "ANTH", "AQUA", "ARAB", "ARTH", "ASCI", "AVC", "BADM", "BINF", "BIOC", "BIOL", "BIOM", "BIOP", "BIOT", "BOT", "BUS", "CCJP", "CDE", "CHEM", "CHIN", "CIS", "CLAS", "CLIN", "CME", "COOP", "CROP", "CRWR", "DAFL", "DAGR", "DENM", "DEQN", "DFN", "DHRT", "DTM", "DVT", "ECON", "ECS", "EDRD", "ENGG", "ENGL", "ENVB", "ENVM", "ENVS", "EQN", "EURO", "FARE", "FCSS", "FDNT", "FINA", "FOOD", "FRAN", "FREN", "FRHD", "FSQA", "GEOG", "GERM", "GERO", "GREK", "HHNS", "HISP", "HIST", "HKIN", "HORT", "HROB", "HTM", "HUMN", "IBIO", "IDEV", "IMPR", "INT", "IPS", "ISS", "ITAL", "JUST", "KIN", "LACS", "LARC", "LAT", "LEAD", "LING", "LRS", "LTS", "MATH", "MBG", "MCB", "MCM", "MCS", "MDST", "MGMT", "MICR", "MUSC", "NANO", "NEUR", "NRS", "NUTR", "OAGR", "PABI", "PATH", "PBIO", "PHIL", "PHYS", "PLNT", "POLS", "POPM", "PORT", "PSYC", "REAL", "RPD", "RST", "SART", "SCMA", "SOAN", "SOC", "SPAN", "STAT", "THST", "TOX", "TRMH", "UNIV", "VETM", "WAT", "WLU", "WMST", "XSEN", "XSHR", "ZOO" }));
        cboSubject.setToolTipText("Select the subject identifier of the course code");
        cboSubject.setEnabled(false);

        lblCode.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblCode.setText("Course Code:");
        lblCode.setEnabled(false);

        txtCode.setText("9999");
        txtCode.setToolTipText("Enter the number of the course code [1000,9999]");
        txtCode.setEnabled(false);

        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblStatus.setText("Attempt Status:");
        lblStatus.setEnabled(false);

        cboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "InProgress", "Complete", "Planned" }));
        cboStatus.setToolTipText("Select the status of the attempt");
        cboStatus.setEnabled(false);

        lblGrade.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblGrade.setText("Attempt Grade:");
        lblGrade.setEnabled(false);

        txtGrade.setText("INC");
        txtGrade.setToolTipText("A grade must be: P (pass), F (fail), INC (incomplete), MNR (mark not reported), or a number [0,100]");
        txtGrade.setEnabled(false);

        lblType.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblType.setText("Attempt Type:");
        lblType.setEnabled(false);

        cboType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Required", "Elective", "Minor/AoA" }));
        cboType.setToolTipText("Select the type course this will be: required, elective, or minor / area of application");
        cboType.setEnabled(false);

        lblSemester.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSemester.setText("Semester Taken:");
        lblSemester.setEnabled(false);

        cboSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F", "W" }));
        cboSemester.setToolTipText("Select the semester the course will be taken: F (fall), W (Winter), B (both)");
        cboSemester.setEnabled(false);

        txtSemesterYear.setText("00");
        txtSemesterYear.setToolTipText("Enter the year the course will be taken (2-digit positive integer of the last 2 digits in the year: eg. 20 for F20)");
        txtSemesterYear.setEnabled(false);

        btnAddToTranscript.setMnemonic('q');
        btnAddToTranscript.setText("Add to Transcript");
        btnAddToTranscript.setToolTipText("Populate all fields before clicking this to add the desired course attempt to your transcript\nNOTE: If Attempt Status is \"InProgress\", then Attempt Grade defaults to \"INC\"");
        btnAddToTranscript.setEnabled(false);
        btnAddToTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToTranscriptActionPerformed(evt);
            }
        });

        btnUpdateGrade.setMnemonic('e');
        btnUpdateGrade.setText("Update Grade in Transcript");
        btnUpdateGrade.setToolTipText("Populate Course Subject and Course Code, Attempt Grade, and Semester Taken before clicking this to update the grade of the corresponding course attempt in your transcript");
        btnUpdateGrade.setEnabled(false);
        btnUpdateGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateGradeActionPerformed(evt);
            }
        });

        btnRemFromTranscript.setMnemonic('w');
        btnRemFromTranscript.setText("Remove from Transcript");
        btnRemFromTranscript.setToolTipText("Populate Course Subject and Course Code, and Semester Taken before clicking this to remove the desired course attempt from your transcript");
        btnRemFromTranscript.setEnabled(false);
        btnRemFromTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemFromTranscriptActionPerformed(evt);
            }
        });

        btnAddToPlanned.setMnemonic('r');
        btnAddToPlanned.setText("Add to Planned List");
        btnAddToPlanned.setToolTipText("Populate Course Subject and Course Code, Attempt Type, and Semester Taken before clicking this to add the desired course attempt to your list of planned courses\nNOTE: Automatically uses Attempt Status of \"Planned\" and Attempt Grade of \"INC\"");
        btnAddToPlanned.setEnabled(false);
        btnAddToPlanned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToPlannedActionPerformed(evt);
            }
        });

        btnRemFromPlanned.setMnemonic('t');
        btnRemFromPlanned.setText("Remove from Planned List");
        btnRemFromPlanned.setToolTipText("Populate Course Subject and Course Code, and Semester Taken before clicking this to remove the desired course attempt from your list of planned courses");
        btnRemFromPlanned.setEnabled(false);
        btnRemFromPlanned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemFromPlannedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMaintainAttemptsLayout = new javax.swing.GroupLayout(pnlMaintainAttempts);
        pnlMaintainAttempts.setLayout(pnlMaintainAttemptsLayout);
        pnlMaintainAttemptsLayout.setHorizontalGroup(
            pnlMaintainAttemptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMaintainAttemptsLayout.createSequentialGroup()
                .addComponent(lblCode, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCode))
            .addGroup(pnlMaintainAttemptsLayout.createSequentialGroup()
                .addComponent(lblSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboSubject, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlMaintainAttemptsLayout.createSequentialGroup()
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlMaintainAttemptsLayout.createSequentialGroup()
                .addComponent(lblGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGrade))
            .addGroup(pnlMaintainAttemptsLayout.createSequentialGroup()
                .addComponent(lblType, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlMaintainAttemptsLayout.createSequentialGroup()
                .addComponent(lblSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSemesterYear))
            .addComponent(btnRemFromPlanned, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnAddToPlanned, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnUpdateGrade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnRemFromTranscript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnAddToTranscript, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlMaintainAttemptsLayout.setVerticalGroup(
            pnlMaintainAttemptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMaintainAttemptsLayout.createSequentialGroup()
                .addGroup(pnlMaintainAttemptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cboSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSubject))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainAttemptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCode)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainAttemptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(cboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainAttemptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGrade)
                    .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainAttemptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblType)
                    .addComponent(cboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMaintainAttemptsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSemester)
                    .addComponent(txtSemesterYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddToTranscript)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemFromTranscript)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateGrade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddToPlanned)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemFromPlanned)
                .addGap(0, 0, 0))
        );

        txtADisplay.setEditable(false);
        txtADisplay.setColumns(20);
        txtADisplay.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        txtADisplay.setRows(5);
        scrDisplay.setViewportView(txtADisplay);

        pnlDegreeMajorRequirements.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Degree, Major, and Requirements", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        pnlDegreeMajorRequirements.setEnabled(false);

        cboDegreeMajor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bachelor of Computing (General), Generic", "Bachelor of Computing (Honours), Computer Science", "Bachelor of Computing (Honours), Software Engineering" }));
        cboDegreeMajor.setToolTipText("Select one of the listed degree and major pairs");
        cboDegreeMajor.setEnabled(false);

        btnSelectDegreeMajor.setMnemonic('x');
        btnSelectDegreeMajor.setText("Select Degree and Major");
        btnSelectDegreeMajor.setToolTipText("Selects or changes your degree and major");
        btnSelectDegreeMajor.setEnabled(false);
        btnSelectDegreeMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectDegreeMajorActionPerformed(evt);
            }
        });

        btnMeetsRequirements.setMnemonic('c');
        btnMeetsRequirements.setText("Check Meets Requirements");
        btnMeetsRequirements.setToolTipText("Determine if user is able to graduate from their selected degree and major");
        btnMeetsRequirements.setEnabled(false);
        btnMeetsRequirements.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMeetsRequirementsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDegreeMajorRequirementsLayout = new javax.swing.GroupLayout(pnlDegreeMajorRequirements);
        pnlDegreeMajorRequirements.setLayout(pnlDegreeMajorRequirementsLayout);
        pnlDegreeMajorRequirementsLayout.setHorizontalGroup(
            pnlDegreeMajorRequirementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnSelectDegreeMajor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnMeetsRequirements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cboDegreeMajor, 0, 684, Short.MAX_VALUE)
        );
        pnlDegreeMajorRequirementsLayout.setVerticalGroup(
            pnlDegreeMajorRequirementsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDegreeMajorRequirementsLayout.createSequentialGroup()
                .addComponent(cboDegreeMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelectDegreeMajor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMeetsRequirements))
        );

        mnuFile.setText("File");

        itmSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        itmSave.setText("Save");
        itmSave.setEnabled(false);
        mnuFile.add(itmSave);
        mnuFile.add(sepFile);

        itmExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        itmExit.setText("Exit");
        mnuFile.add(itmExit);

        barMenu.add(mnuFile);

        mnuOptions.setText("Options");

        itmAdmin.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        itmAdmin.setText("Admin Mode");
        itmAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmAdminActionPerformed(evt);
            }
        });
        mnuOptions.add(itmAdmin);

        barMenu.add(mnuOptions);

        mnuView.setText("View");
        mnuView.setEnabled(false);

        mnuListMissingReqCourses.setText("List of Missing Required Courses");

        itmLMRCTranscript.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        itmLMRCTranscript.setText("Transcript");
        itmLMRCTranscript.setToolTipText("View a list of required courses that are not represented in your transcript");
        itmLMRCTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmLMRCTranscriptActionPerformed(evt);
            }
        });
        mnuListMissingReqCourses.add(itmLMRCTranscript);

        itmLMRCAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        itmLMRCAll.setText("Transcript and Planned");
        itmLMRCAll.setToolTipText("View a list of required courses that are not represented in your transcript nor list of planned courses");
        itmLMRCAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmLMRCAllActionPerformed(evt);
            }
        });
        mnuListMissingReqCourses.add(itmLMRCAll);

        mnuView.add(mnuListMissingReqCourses);

        mnuListPrereqCourses.setText("List of Prerequisite Courses");

        itmLPCReqCourses.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        itmLPCReqCourses.setText("Required Courses");
        itmLPCReqCourses.setToolTipText("View a list of prerequisite courses for any required course");
        itmLPCReqCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmLPCReqCoursesActionPerformed(evt);
            }
        });
        mnuListPrereqCourses.add(itmLPCReqCourses);

        itmLPCPlanned.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_MASK));
        itmLPCPlanned.setText("Necessary for Planned List");
        itmLPCPlanned.setToolTipText("View a list of prerequisite courses that must be taken in order to take the courses currently in your list of planned courses");
        itmLPCPlanned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmLPCPlannedActionPerformed(evt);
            }
        });
        mnuListPrereqCourses.add(itmLPCPlanned);

        mnuView.add(mnuListPrereqCourses);
        mnuView.add(sepView);

        itmNumCredits.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.CTRL_MASK));
        itmNumCredits.setText("Number of Credits");
        itmNumCredits.setToolTipText("View the number of credits completed, remaining to complete, and the number of credits that must be added to your list of planned courses in order to have a satisfactory amount to graduate");
        itmNumCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmNumCreditsActionPerformed(evt);
            }
        });
        mnuView.add(itmNumCredits);

        itmGPA.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.CTRL_MASK));
        itmGPA.setText("GPA");
        itmGPA.setToolTipText("View overall GPA, GPA for CIS courses, and GPA for most recent 10 credits");
        itmGPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmGPAActionPerformed(evt);
            }
        });
        mnuView.add(itmGPA);

        itmViewPlanBySemester.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.CTRL_MASK));
        itmViewPlanBySemester.setText("Plan of Study by Semester");
        itmViewPlanBySemester.setToolTipText("Displays plan of study organzied via sorting by semester taken, or planned to take if not taken yet");
        itmViewPlanBySemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmViewPlanBySemesterActionPerformed(evt);
            }
        });
        mnuView.add(itmViewPlanBySemester);

        barMenu.add(mnuView);

        mnuDisplay.setText("Display");
        mnuDisplay.setEnabled(false);

        itmDisplayProfile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        itmDisplayProfile.setText("Profile");
        itmDisplayProfile.setToolTipText("Prints all profile information");
        itmDisplayProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmDisplayProfileActionPerformed(evt);
            }
        });
        mnuDisplay.add(itmDisplayProfile);

        itmDisplayTranscript.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        itmDisplayTranscript.setText("Transcript");
        itmDisplayTranscript.setToolTipText("Prints transcript info");
        itmDisplayTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmDisplayTranscriptActionPerformed(evt);
            }
        });
        mnuDisplay.add(itmDisplayTranscript);

        itmDisplayPlannedList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        itmDisplayPlannedList.setText("Planned List");
        itmDisplayPlannedList.setToolTipText("Prints list of planned courses");
        itmDisplayPlannedList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itmDisplayPlannedListActionPerformed(evt);
            }
        });
        mnuDisplay.add(itmDisplayPlannedList);

        barMenu.add(mnuDisplay);

        setJMenuBar(barMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(pnlUserInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pnlMaintainAttempts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(pnlSaveExit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlDegreeMajorRequirements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scrDisplay))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlDegreeMajorRequirements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrDisplay))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlUserInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnlMaintainAttempts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlSaveExit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // get input from user and check it
        boolean validInput = true;
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        String sID = txtStudentID.getText();
        
        if(firstName.equals("") || firstName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error: must enter a first name", getTitle(), JOptionPane.ERROR_MESSAGE);
            validInput = false;
        }
        if(lastName.equals("") || lastName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error: must enter a last name", getTitle(), JOptionPane.ERROR_MESSAGE);
            validInput = false;
        }
        if(sID.equals("") || sID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error: must enter a student ID number", getTitle(), JOptionPane.ERROR_MESSAGE);
            validInput = false;
        } else if(!isInteger(sID)) {
            JOptionPane.showMessageDialog(null, "Error: student ID number must be a positive number", getTitle(), JOptionPane.ERROR_MESSAGE);
            validInput = false;
        }
        
        // only execute if input was valid
        if(validInput) {
            // update functionality restrictions
            btnLogin.setEnabled(false);
            btnLogout.setEnabled(true);
            btnLoadSave.setEnabled(true);
            btnStartOver.setEnabled(true);

            txtFirstName.setEditable(false);
            txtLastName.setEditable(false);
            txtStudentID.setEditable(false);
            
            // set Student user attributes
            try {
                theUser.setFirstName(firstName);
                theUser.setLastName(lastName);
                theUser.setStudentNumber(Integer.parseInt(sID));
            } catch(NullPointerException ex) {
                JOptionPane.showMessageDialog(null, "Oops, some login info was somehow null...?\n" +
                        "Good thing I caught it: " + ex, getTitle(), JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // update functionality restrictions
        btnLogin.setEnabled(true);
        btnLogout.setEnabled(false);
        btnLoadSave.setEnabled(false);
        btnStartOver.setEnabled(false);
        setEnabledAll(false);
        
        txtFirstName.setEditable(true);
        txtLastName.setEditable(true);
        txtStudentID.setEditable(true);
        
        // clear fields
        txtCode.setText("9999");
        txtGrade.setText("INC");
        txtSemesterYear.setText("00");
        txtADisplay.setText("");
        
        theUser = new Student(); //reset
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnLoadSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadSaveActionPerformed
        // check if file actually exists
        boolean itExists = theUser.readSavedState(theUser.getLastName() + theUser.getFirstName() + theUser.getStudentNumber() + ".bin");
        
        if(itExists) {
            // update functionality restrictions
            btnLoadSave.setEnabled(false);
            btnStartOver.setEnabled(false);
            setEnabledAll(true);
        } else {
            JOptionPane.showMessageDialog(null, "Sorry, looks like you need to 'Start Over' and create a new plan",
                    "CIS*2430: Planner Assignment 2", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoadSaveActionPerformed

    private void btnStartOverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartOverActionPerformed
        // update functionality restrictions
        btnLoadSave.setEnabled(false);
        btnStartOver.setEnabled(false);
        
        pnlDegreeMajorRequirements.setEnabled(true);
        cboDegreeMajor.setEnabled(true);
        btnSelectDegreeMajor.setEnabled(true);
    }//GEN-LAST:event_btnStartOverActionPerformed

    private void btnSelectDegreeMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectDegreeMajorActionPerformed
        // update functionality restrictions
        setEnabledAll(true);
        
        // check which option is selected, update the Student's degree and major
        if(cboDegreeMajor.getSelectedItem().equals("Bachelor of Computing (General), Generic") ||
                cboDegreeMajor.getSelectedItem().equals("BCG")) {
            theUser.getPlan().setDegreeProgram(new BCG());
        } else if(cboDegreeMajor.getSelectedItem().equals("Bachelor of Computing (Honours), Computer Science") ||
                cboDegreeMajor.getSelectedItem().equals("CS")) {
            theUser.getPlan().setDegreeProgram(new CS());
        } else if(cboDegreeMajor.getSelectedItem().equals("Bachelor of Computing (Honours), Software Engineering") ||
                cboDegreeMajor.getSelectedItem().equals("SEng") || cboDegreeMajor.getSelectedItem().equals("SENG")) {
            theUser.getPlan().setDegreeProgram(new SEng());
        } else {
            JOptionPane.showMessageDialog(null, "Error: that degree does not exist...", getTitle(), JOptionPane.ERROR_MESSAGE);
        }
        
        // make sure to initialize these again after they're changed
        theUser.getPlan().getDegreeProgram().getCatalog().initializeCatalog("courseList.csv");
        //should change to catalog.readSavedCatalog("catalog.bin") and have admin init catalog and then save it
        
        //should change to have admin do load and save some of the work
        // load and store in a hashmap
        HashMap<String, ArrayList<String>> degKeyReqCourseList = loadRequiredCourses("degreeList.csv");
        // if it worked, it will have a size
        if(!degKeyReqCourseList.isEmpty() && degKeyReqCourseList.size() > 0) {
            saveRequiredCourses(degKeyReqCourseList); //writes a binary file to save the loaded catalog
        }
        theUser.getPlan().getDegreeProgram().readRequiredCourses("degreeList.bin", theUser.getPlan().getDegreeProgram().getMajor());
        
    }//GEN-LAST:event_btnSelectDegreeMajorActionPerformed

    private void itmDisplayProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmDisplayProfileActionPerformed
        // prints all the Student user's profile info
        theUser.getPlan().sortTranscript(); // sort it first
        theUser.getPlan().sortPlannedList(); // sort it first
        
        // construct output string
        String output = theUser.toString();
        DecimalFormat df = new DecimalFormat("0.00%");
        // 3 User Stories: displays overall GPA, CIS GPA, and GPA for 10 most recent credits
        output += "\n\nOverall GPA:\t\t\t" + df.format(calcOverallGPA(theUser.getPlan()) / 100.0 ) +
                "\nCIS GPA:\t\t\t" + df.format(calcSubjectGPA(theUser.getPlan(), "CIS") / 100.0) +
                "\nGPA for 10 Most Recent Credits:\t" + df.format(calcGPA10MostRecent(theUser.getPlan()) / 100.0) + "\n";
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_itmDisplayProfileActionPerformed

    private void itmDisplayTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmDisplayTranscriptActionPerformed
        String headerDivide = "====================\t==================================================\t=============\t================\t==============================" +
                "\t==============\t=============\t============\t===========\n";
        // prints the Student user's transcript info
        String output = "Transcript Information\n\n" + headerDivide +
                String.format("%-" + 18 + "." + 18 + "s", "Course Code") +
                "\tCourse Title\t\t\t\t\t\tCourse Credit\tSemester Offered\t" +
                String.format("%-" + 30 + "." + 30 + "s", "Prerequisite Courses") + 
                "\tSemester Taken\tCourse Status\tCourse Grade\tCourse Type\n" + headerDivide;
        if(theUser.getPlan().getTranscript().isEmpty()) {
            output += "\nYour transcript is empty\n\n";
        } else {
            theUser.getPlan().sortTranscript(); // sort it first
            for(Attempt a : theUser.getPlan().getTranscript()) {
                output += a.toString() + "\n";
            }
        }
        output += headerDivide;
        txtADisplay.setText(output);
    }//GEN-LAST:event_itmDisplayTranscriptActionPerformed

    private void itmDisplayPlannedListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmDisplayPlannedListActionPerformed
        String headerDivide = "====================\t==================================================\t=============\t================\t==============================" +
                "\t==============\t=============\t============\t===========\n";
        // prints the Student user's planned list info
        String output = "Planned List Information\n\n" + headerDivide + 
                String.format("%-" + 18 + "." + 18 + "s", "Course Code") +
                "\tCourse Title\t\t\t\t\t\tCourse Credit\tSemester Offered\t" +
                String.format("%-" + 30 + "." + 30 + "s", "Prerequisite Courses") + 
                "\tSemester Taken\tCourse Status\tCourse Grade\tCourse Type\n" + headerDivide;
        if(theUser.getPlan().getPlannedList().isEmpty()) {
            output += "\nThere are no planned course attempts\n\n";
        } else {
            theUser.getPlan().sortPlannedList(); // sort it first
            for(Attempt a : theUser.getPlan().getPlannedList()) {
                output += a.toString() + "\n";
            }
        }
        output += headerDivide;
        txtADisplay.setText(output);
    }//GEN-LAST:event_itmDisplayPlannedListActionPerformed

    private void itmLMRCTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmLMRCTranscriptActionPerformed
        // display the list of required courses that do not have passing grade in the transcript
        txtADisplay.setText(viewMissingRequiredCoursesInTranscript(theUser.getPlan()));
    }//GEN-LAST:event_itmLMRCTranscriptActionPerformed

    private void itmLMRCAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmLMRCAllActionPerformed
        // display the list of required courses that do not have passing grade in the transcript or planned list
        txtADisplay.setText(viewMissingRequiredCoursesInTranscriptAndPlannedList(theUser.getPlan()));
    }//GEN-LAST:event_itmLMRCAllActionPerformed

    private void itmLPCReqCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmLPCReqCoursesActionPerformed
        // display list of all required courses with their list of prerequisite coures
        txtADisplay.setText(viewPrerequisitesForAllRequiredCourses(theUser.getPlan()));
    }//GEN-LAST:event_itmLPCReqCoursesActionPerformed

    private void itmLPCPlannedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmLPCPlannedActionPerformed
        // display list of all planned courses and their list of prerequisite courses
        txtADisplay.setText(viewPrerequisitesForPlannedList(theUser.getPlan()));
    }//GEN-LAST:event_itmLPCPlannedActionPerformed

    private void itmNumCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmNumCreditsActionPerformed
        // NOTE: preprocesses all course attempts to only include those that have been passed (otherwise, they didn't earn a credit for it)
        // User Story: displays number of credits completed/earned (only counts if it's a passing grade) (accounts for duplicate passed courses)
        String output = String.format("%" + 66 + "." + 66 + "s", "Number of Credits Earned:") + 
                "\t" + theUser.getPlan().getCreditsEarned() + "\n";
        
        ArrayList<Course> allTheCoursesPlannedAndTaken = new ArrayList<>();
        ArrayList<Course> allTheCoursesPlanned = new ArrayList<>();
        String sGrade = "";
        // add courses in transcript to both lists to be passed
        for(Attempt a : theUser.getPlan().getTranscript()) {
            // only add to the list if complete and have a passing grade (P or number [50,100])
            if(a.getAttemptStatus().equals("Complete")) {
                sGrade = a.getAttemptGrade();
                if(sGrade.equals("P") || (isDouble(sGrade) && Double.parseDouble(sGrade) >= 50.0 && Double.parseDouble(sGrade) <= 100.0)) {
                    allTheCoursesPlannedAndTaken.add(a.getCourseAttempted());
                    allTheCoursesPlanned.add(a.getCourseAttempted());
                }
            }
        }
        // add courses in plannedList to the combined list to be passed
        for(Attempt a : theUser.getPlan().getPlannedList()) {
            allTheCoursesPlanned.add(a.getCourseAttempted());
        }
        
        // User Story: displays number of credits that must be added to the list of planned courses in order to have enough credits to complete degree (ignores grade as specified)
        output += String.format("%" + 66 + "." + 66 + "s", "Number of Credits Missing From Transcript and Planned Course List:") + 
                "\t" + theUser.getPlan().getDegreeProgram().numberOfCreditsRemaining(allTheCoursesPlannedAndTaken) + "\n";
        // User Story: displays number of credits remaining (to be completed) in order to complete degree (ignores grade as specified)
        output += String.format("%" + 66 + "." + 66 + "s", "Number of Credits Remaining to Complete Degree:") + 
                "\t" + theUser.getPlan().getDegreeProgram().numberOfCreditsRemaining(allTheCoursesPlanned) + "\n";
        txtADisplay.setText(output);
    }//GEN-LAST:event_itmNumCreditsActionPerformed

    private void itmGPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmGPAActionPerformed
        DecimalFormat df = new DecimalFormat("0.00%");
        // 3 User Stories: displays overall GPA, CIS GPA, and GPA for 10 most recent credits
        String output = "Overall GPA:\t\t\t" + df.format(calcOverallGPA(theUser.getPlan()) / 100.0 ) +
                "\nCIS GPA:\t\t\t" + df.format(calcSubjectGPA(theUser.getPlan(), "CIS") / 100.0) +
                "\nGPA for 10 Most Recent Credits:\t" + df.format(calcGPA10MostRecent(theUser.getPlan()) / 100.0) + "\n";
        txtADisplay.setText(output);
    }//GEN-LAST:event_itmGPAActionPerformed

    private void itmViewPlanBySemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmViewPlanBySemesterActionPerformed
        // User Story: displays course plan (transcript and plannedList as one list) sorted by semester (taken/planned-to-take)
        txtADisplay.setText(theUser.getPlan().viewPlanBySemester());
    }//GEN-LAST:event_itmViewPlanBySemesterActionPerformed

    private void btnMeetsRequirementsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMeetsRequirementsActionPerformed
        String output = "Checking Meets Requirements...\n";
        // User Story: determine if user meets the completion requirements of their chosen degree and major
        ArrayList<Course> transcriptCourses = new ArrayList<>();
        String sGrade = "";
        // create list of courses using transcript
        for(Attempt a : theUser.getPlan().getTranscript()) {
            // only add to the list if complete and have a passing grade (P or number [50,100])
            if(a.getAttemptStatus().equals("Complete")) {
                sGrade = a.getAttemptGrade();
                if(sGrade.equals("P") || (isDouble(sGrade) && Double.parseDouble(sGrade) >= 50.0 && Double.parseDouble(sGrade) <= 100.0)) {
                    transcriptCourses.add(a.getCourseAttempted());
                }
            }
        }
        
        boolean meets = theUser.getPlan().getDegreeProgram().meetsRequirements(transcriptCourses);
        
        boolean passAvg = true;
        boolean passAvgCIS = true;
        // also needs >= 60% avg overall, and >= 70% avg CIS courses
        double avg = calcOverallGPA(theUser.getPlan());
        if(avg < 60.0) {
            passAvg = false;
            output += "\nSorry, your cumulative average is " + avg + "%, but it needs to be at least 60%";
        }
        double avgCIS = calcSubjectGPA(theUser.getPlan(), "CIS");
        if(avgCIS < 70.0) {
            passAvgCIS = false;
            output += "\nSorry, your cumulative average for CIS courses is " + avgCIS + "%, but it needs to be at least 70%";
        }
        
        output += "\n" + theUser.getPlan().getDegreeProgram().getMeetsRequirementsOutput(transcriptCourses) + "\n";
        
        // display summary msg
        if(meets && passAvg && passAvgCIS) {
            output += "\n====================================================================================================\n" +
                    "Congratulations, you meet requirements to graduate from " + theUser.getPlan().getDegreeProgram().getDegreeTitle() + 
                    " - " + theUser.getPlan().getDegreeProgram().getMajor() + "!";
        } else {
            output += "\n====================================================================================================\n" +
                    "Unfortunately, you do not meet requirements to graduate from " + theUser.getPlan().getDegreeProgram().getDegreeTitle() + 
                    " - " + theUser.getPlan().getDegreeProgram().getMajor() + "\n";
        }
        
        txtADisplay.setText(output);
    }//GEN-LAST:event_btnMeetsRequirementsActionPerformed

    // =========================================================================
    
    private void btnAddToTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToTranscriptActionPerformed
        // check that the following fields filled with good data:
        // Course Subject, Course Code, Attempt Status, Attempt Grade, Attempt Type, Semester Taken
        boolean allGood = true;
        String output = "";
        
        // check course subject (always good)
        String courseCodeInput = cboSubject.getSelectedItem().toString();
        
        // check course code is [1000,9999]
        String codeInput = txtCode.getText().trim();
        if(codeInput.length() == 4 && isInteger(codeInput) && Integer.parseInt(codeInput) >= 1000) {
            courseCodeInput += "*" + codeInput;
        } else {
            allGood = false;
            output += "\nError: Add to Transcript - Course Code must be a 4-digit positive number";
        }
        
        // check status is either InProgress or Complete
        String statusInput = cboStatus.getSelectedItem().toString();
        if(!statusInput.equals("InProgress") && !statusInput.equals("Complete")) {
            allGood = false;
            output += "\nError: Add to Transcript - Attempt Status must be 'InProgress' or 'Complete'";
        }
        
        // check grade
        String gradeInput = txtGrade.getText().trim();
        // If status is 'InProgress', grade must be 'INC'
        if(statusInput.equals("InProgress")) {
            gradeInput = "INC";
        } else {
            if(gradeInput.length() <= 3 && (gradeInput.equals("P") || gradeInput.equals("F") || gradeInput.equals("INC") || gradeInput.equals("MNR") ||
                    (isDouble(gradeInput) && Double.parseDouble(gradeInput) >= 0.0 && Double.parseDouble(gradeInput) <= 100.0))) {
                // it's good, do nothing
            } else {
                allGood = false;
                output += "\nError: Add to Transcript - Attempt Grade must be one of: P (pass), F (fail), INC (incomplete), MNR (mark not reported), or a number [0,100]";
            }
        }
        
        // check type (always good)
        String typeInput = cboType.getSelectedItem().toString();
        
        // check semester taken (semester always good), specifcally the year
        String semesterInput = cboSemester.getSelectedItem().toString();
        String semesterYearInput = txtSemesterYear.getText().trim();
        if(semesterYearInput.length() == 2 && isInteger(semesterYearInput)) {
            semesterInput += semesterYearInput;
        } else {
            allGood = false;
            output += "\nError: Add to Transcript - Semester Taken's year must be a 2-digit positive integer of the last 2 digits in the year (eg. 20 for F20)";
        }
                
        // only run if all fields have valid input
        if(allGood) {
            // try to add an Attempt to the transcript using given valid input, displays error msg if it doesn't work
            boolean itWorked = theUser.getPlan().addToTranscript(courseCodeInput, statusInput, gradeInput, typeInput, semesterInput);
            
            if(!itWorked) {
                output += "Did not add '" + courseCodeInput + "' to the transcript";
            } else {
                output += "Successfully added '" + courseCodeInput + "' to the transcript";
            }
        }
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnAddToTranscriptActionPerformed

    private void btnRemFromTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemFromTranscriptActionPerformed
        // check that the following fields filled with good data:
        // Course Subject, Course Code, Semester Taken
        boolean allGood = true;
        String output = "";
        
        // check course subject (always good)
        String courseCodeInput = cboSubject.getSelectedItem().toString();
        
        // check course code is [1000,9999]
        String codeInput = txtCode.getText().trim();
        if(codeInput.length() == 4 && isInteger(codeInput) && Integer.parseInt(codeInput) >= 1000) {
            courseCodeInput += "*" + codeInput;
        } else {
            allGood = false;
            output += "\nError: Remove from Transcript - Course Code must be a 4-digit positive number";
        }
        
        // check semester taken (semester always good), specifcally the year
        String semesterInput = cboSemester.getSelectedItem().toString();
        String semesterYearInput = txtSemesterYear.getText().trim();
        if(semesterYearInput.length() == 2 && isInteger(semesterYearInput)) {
            semesterInput += semesterYearInput;
        } else {
            allGood = false;
            output += "\nError: Remove from Transcript - Semester Taken's year must be a 2-digit positive integer of the last 2 digits in the year (eg. 20 for F20)";
        }
        
        // only run if all fields have valid input
        if(allGood) {
            // try to remove an Attempt from the transcript using given valid input, displays error msg if it doesn't work
            boolean itWorked = theUser.getPlan().removeFromTranscript(courseCodeInput, semesterInput);
            
            if(!itWorked) {
                output += "Did not remove '" + courseCodeInput + "' from the transcript";
            } else {
                output += "Successfully removed '" + courseCodeInput + "' from the transcript";
            }
        }
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnRemFromTranscriptActionPerformed

    private void btnUpdateGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateGradeActionPerformed
        // check that the following fields filled with good data:
        // Course Subject, Course Code, Attempt Grade, Semester Taken
        boolean allGood = true;
        String output = "";
        
        // check course subject (always good)
        String courseCodeInput = cboSubject.getSelectedItem().toString();
        
        // check course code is [1000,9999]
        String codeInput = txtCode.getText().trim();
        if(codeInput.length() == 4 && isInteger(codeInput) && Integer.parseInt(codeInput) >= 1000) {
            courseCodeInput += "*" + codeInput;
        } else {
            allGood = false;
            output += "\nError: Update Grade in Transcript - Course Code must be a 4-digit positive number";
        }
        
        // get status, checked later along with grade
        String statusInput = cboStatus.getSelectedItem().toString();
        // check grade
        String gradeInput = txtGrade.getText().trim();
        
        // need to check grade still
        // if grade is P, F, MNR, or a number, then status becomes complete
        // grade cannot become INC
        if(gradeInput.length() <= 3) {
            if(gradeInput.equals("INC")) {
                allGood = false;
                output += "\nError: Update Grade in Transcript - Attempt Grade cannot be INC (incomplete)";
            } else if(gradeInput.equals("P") || gradeInput.equals("F") || gradeInput.equals("MNR") ||
                    (isDouble(gradeInput) && Double.parseDouble(gradeInput) >= 0.0 && Double.parseDouble(gradeInput) <= 100.0)) {
                // it's good -> so set status to 'Complete'
                statusInput = "Complete";
            } else {
                allGood = false;
                output += "\nError: Update Grade in Transcript - Attempt Grade must be one of: P (pass), F (fail), MNR (mark not reported), or a number [0,100]";
            }
            // it's good, do nothing
        } else {
            allGood = false;
            output += "\nError: Update Grade in Transcript - Attempt Grade must be one of: P (pass), F (fail), MNR (mark not reported), or a number [0,100]";
        }
        
        // check semester taken (semester always good), specifcally the year
        String semesterInput = cboSemester.getSelectedItem().toString();
        String semesterYearInput = txtSemesterYear.getText().trim();
        if(semesterYearInput.length() == 2 && isInteger(semesterYearInput)) {
            semesterInput += semesterYearInput;
        } else {
            allGood = false;
            output += "\nError: Update Grade in Transcript - Semester Taken's year must be a 2-digit positive integer of the last 2 digits in the year (eg. 20 for F20)";
        }
        
        // only run if all fields have valid input
        if(allGood) {
            // try to update the an Attempt in the transcript using given valid input, displays error msg if it doesn't work
            boolean itWorked = theUser.getPlan().setAttemptGrade(courseCodeInput, semesterInput, gradeInput);
            boolean itWorked2 = theUser.getPlan().setAttemptStatus(courseCodeInput, semesterInput, statusInput);
            
            if(!itWorked && !itWorked2) {
                output += "Did not update the grade of '" + courseCodeInput + "' in the transcript";
            } else {
                output += "Successfully updated the grade of '" + courseCodeInput + "' in the transcript";
            }
        }
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnUpdateGradeActionPerformed

    private void btnAddToPlannedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToPlannedActionPerformed
        // check that the following fields filled with good data:
        // Course Subject, Course Code, (NOTE: Attempt Status is always 'Planned'), Attempt Type, Semester Taken
        boolean allGood = true;
        String output = "";
        
        // check course subject (always good)
        String courseCodeInput = cboSubject.getSelectedItem().toString();
        
        // check course code is [1000,9999]
        String codeInput = txtCode.getText().trim();
        if(codeInput.length() == 4 && isInteger(codeInput) && Integer.parseInt(codeInput) >= 1000) {
            courseCodeInput += "*" + codeInput;
        } else {
            allGood = false;
            output += "\nError: Add to Planned List - Course Code must be a 4-digit positive number";
        }
        
        // status is always this
        String statusInput = "Planned";
        // grade is always this
        String gradeInput = "INC";
        
        // check type (always good)
        String typeInput = cboType.getSelectedItem().toString();
        
        // check semester taken (semester always good), specifcally the year
        String semesterInput = cboSemester.getSelectedItem().toString();
        String semesterYearInput = txtSemesterYear.getText().trim();
        if(semesterYearInput.length() == 2 && isInteger(semesterYearInput)) {
            semesterInput += semesterYearInput;
        } else {
            allGood = false;
            output += "\nError: Add to Planned List - Semester Taken's year must be a 2-digit positive integer of the last 2 digits in the year (eg. 20 for F20)";
        }
                
        // only run if all fields have valid input
        if(allGood) {
            // try to add an Attempt to the planned list using given valid input, displays error msg if it doesn't work
            boolean itWorked = theUser.getPlan().addToPlannedList(courseCodeInput, statusInput, gradeInput, typeInput, semesterInput);
            
            if(!itWorked) {
                output += "Did not add '" + courseCodeInput + "' to the list of planned course attempts";
            } else {
                output += "Successfully added '" + courseCodeInput + "' to the list of planned course attempts";
            }
        }
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnAddToPlannedActionPerformed

    private void btnRemFromPlannedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemFromPlannedActionPerformed
        // check that the following fields filled with good data:
        // Course Subject, Course Code, Semester Taken
        boolean allGood = true;
        String output = "";
        
        // check course subject (always good)
        String courseCodeInput = cboSubject.getSelectedItem().toString();
        
        // check course code is [1000,9999]
        String codeInput = txtCode.getText().trim();
        if(codeInput.length() == 4 && isInteger(codeInput) && Integer.parseInt(codeInput) >= 1000) {
            courseCodeInput += "*" + codeInput;
        } else {
            allGood = false;
            output += "\nError: Remove from Planned List - Course Code must be a 4-digit positive number";
        }
        
        // check semester taken (semester always good), specifcally the year
        String semesterInput = cboSemester.getSelectedItem().toString();
        String semesterYearInput = txtSemesterYear.getText().trim();
        if(semesterYearInput.length() == 2 && isInteger(semesterYearInput)) {
            semesterInput += semesterYearInput;
        } else {
            allGood = false;
            output += "\nError: Remove from Planned List - Semester Taken's year must be a 2-digit positive integer of the last 2 digits in the year (eg. 20 for F20)";
        }
        
        // only run if all fields have valid input
        if(allGood) {
            // try to remove an Attempt from the planned list using given valid input, displays error msg if it doesn't work
            boolean itWorked = theUser.getPlan().removeFromPlannedList(courseCodeInput, semesterInput);
            
            if(!itWorked) {
                output += "Did not remove '" + courseCodeInput + "' from the list of planned course attempts";
            } else {
                output += "Successfully removed '" + courseCodeInput + "' from the list of planned course attempts";
            }
        }
        txtADisplay.setText(output + "\n");
    }//GEN-LAST:event_btnRemFromPlannedActionPerformed

    private void itmAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itmAdminActionPerformed
        // display msg to user
        JOptionPane.showMessageDialog(null, "Admin Mode Enabled",
                "CIS*2430: Planner Assignment 2 - Admin Mode", JOptionPane.INFORMATION_MESSAGE);
        
        // hide current frame and display admin frame
        this.setVisible(false);
        adminFrame = new AdminMode(this);
    }//GEN-LAST:event_itmAdminActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Planner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Planner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Planner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Planner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable(){
            public void run()
            {
                Planner myFrame = new Planner();
                myFrame.setVisible(true);
                
                // display welcome message ( / mini read me that explains how to use the program
                JOptionPane.showMessageDialog(myFrame, "Welcome to Planner!\n"
                        + "\nTo get started, just type in your first and last name, as well as your student ID number, in the correspdonding fields, then, click 'Login'."
                        + "\nAfterwards, you must either select 'Start Over' to create a new Plan, or 'Load Save' to start where you left off last time."
                        + "\n        Note that you will not be able to load a save if you have never saved your plan."
                        + "\nAt any time while logged in, you can click 'Save' to save your current state and progress."
                        + "\nAlso, at any time, you can click 'Start Over' to start from scratch."
                        + "\nIf you would like to switch users without restarting the program, click 'Logout', then choose to 'Login' as a different user."
                        + "\n\n                Please note, if you 'Logout' or exit the program, your progress will not be saved unless select 'Save' beforehand."
                        + "\n                Also note that saving current state and progress overwrites your previous save, if one exists."
                        + "\n\nFor functionality, if you are confused plese read the tooltips for help. Essentially, you should select your degree to the right of the login area first."
                        + "\nAfter doing this, you are able to use the area beneath the login section for the Add, Remove, and Update buttons."
                        + "\nFurthermore, there are additional buttons such as 'Check Meets Requirements' that show information in the text display area."
                        + "\nAlso, in the menu bar at the top you can access the 'View' and 'Display' items to show you information in the text display area."
                        + "\n\n                Note for admins: use options to select 'Admin Mode' You will then use a separate window to access admin privileges."
                        + "\n                                   Also, the functionality of that window is very similar to this one."
                        + "\n                                        (Password = 'abcd1234Dm1n')",
                        "CIS*2430: Planner Assignment 2", JOptionPane.INFORMATION_MESSAGE);
            }
        });
    }
    
    // =========================================================================
    
    /**
     * Displays all required courses for the degree and major that aren't in the Student's transcript
     * @param pos the Plan of Study being used
     * @return the output for the list of required courses not in the transcript with a passing grade
     */
    public static String viewMissingRequiredCoursesInTranscript(PlanOfStudy pos)
    {
        String output = "";
        ArrayList<String> missingCourseList = new ArrayList<>();
        boolean match = false;
        String sGrade = "";
        
        for(Course c : pos.getDegreeProgram().getRequiredCourses()) {
            match = false;
            for(Attempt fromTranscript : pos.getTranscript()) {
                if(fromTranscript.getCourseAttempted().getCourseCode().equals(c.getCourseCode())) {
                    // check that it is completed and passed (P or number [50,100])
                    if(fromTranscript.getAttemptStatus().equals("Complete")) {
                        sGrade = fromTranscript.getAttemptGrade();
                        if(sGrade.equals("P") || (isDouble(sGrade) && Double.parseDouble(sGrade) >= 50.0 && Double.parseDouble(sGrade) <= 100.0)) {
                            match = true;
                            break; // found a match
                        }
                    }
                }
            }
            if(!match) {
                missingCourseList.add(String.format("%-" + 9 + "." + 9 + "s", c.getCourseCode()) + " - " + c.getCourseTitle());
            }
        }
        if(missingCourseList.isEmpty()) {
            output += "All the required courses for " + pos.getDegreeProgram().getDegreeTitle() + 
                    ", " + pos.getDegreeProgram().getMajor() + " are in your transcript and have a passing grade"; 
        } else {
            output += "Your transcript is missing a passing grade for the following required courses:\n";
            for(String s : missingCourseList) {
                output += "\n" + s;
            }
        }
        return output;
    }
    
    /**
     * Displays all required courses for the degree and major that aren't in the Student's transcript or the list of planned courses
     * @param pos the Plan of Study being used
     * @return the output for the list of required courses not in the transcript or list of planned courses
     */
    public static String viewMissingRequiredCoursesInTranscriptAndPlannedList(PlanOfStudy pos)
    {
        String output = "";
        ArrayList<String> missingCourseList = new ArrayList<>();
        boolean match = false;
        String sGrade = "";
        
        for(Course c : pos.getDegreeProgram().getRequiredCourses()) {
            match = false;
            // check transcript
            for(Attempt fromTranscript : pos.getTranscript()) {
                if(fromTranscript.getCourseAttempted().getCourseCode().equals(c.getCourseCode())) {
                    // check that it is completed and passed (P or number [50,100])
                    if(fromTranscript.getAttemptStatus().equals("Complete")) {
                        sGrade = fromTranscript.getAttemptGrade();
                        if(sGrade.equals("P") || (isDouble(sGrade) && Double.parseDouble(sGrade) >= 50.0 && Double.parseDouble(sGrade) <= 100.0)) {
                            match = true;
                            break; // found a match
                        }
                    }
                }
            }
            // check planned list
            for(Attempt fromPlannedList : pos.getPlannedList()) {
                if(fromPlannedList.getCourseAttempted().getCourseCode().equals(c.getCourseCode())) {
                    match = true;
                    break; // found a match
                }
            }
            if(!match) {
                missingCourseList.add(String.format("%-" + 9 + "." + 9 + "s", c.getCourseCode()) + " - " + c.getCourseTitle());
            }
        }
        if(missingCourseList.isEmpty()) {
            output += "All the required courses for " + pos.getDegreeProgram().getDegreeTitle() + 
                    ", " + pos.getDegreeProgram().getMajor() + " are in your plan of study"; 
        } else {
            output += "A list of all required courses that do not have a passing grade and are not in your list of your planned courses are listed below:\n";
            for(String s : missingCourseList) {
                output += "\n" + s;
            }
        }
        return output;
    }
    
    /**
     * Displays the prerequisite courses for all required courses for the degree and major
     * @param pos the Plan of Study being used
     * @return the output to display the prerequisite courses for all required courses for the degree and major
     */
    public static String viewPrerequisitesForAllRequiredCourses(PlanOfStudy pos)
    {
        String headerDivide = "============================================================\t==============================\n";
        String output = headerDivide + "Required Course\t\t\t\t\t\t\tPrerequisite Courses\n" + headerDivide;
        int counter = 0;
        
        // loops through all required courses
        for(Course req : pos.getDegreeProgram().getRequiredCourses()) {
            counter = 0;
            output += String.format("%-" + 9 + "." + 9 + "s", req.getCourseCode()) + " - " +
                    String.format("%-" + 50 + "." + 50 + "s", req.getCourseTitle());
            
            // loops through all prerequisite courses for the required course
            for(Course prereq : req.getPrerequisites()) {
                if(counter == 0) {
                    output += "\t";
                } else {
                    output += ", ";
                }
                output += prereq.getCourseCode();
                counter++;
            }
            output += "\n";
        }
        output += headerDivide;
        return output;
    }
    
    /**
     * Displays the prerequisite courses for all courses in the planned list
     * @param pos the Plan of Study being used
     * @return the output to display the prerequisite courses for all courses in the Student user's list of planned courses
     */
    public static String viewPrerequisitesForPlannedList(PlanOfStudy pos)
    {
        String headerDivide = "============================================================\t==============================\n";
        String output = headerDivide + "Planned Course\t\t\t\t\t\t\tPrerequisite Courses\n" + headerDivide;
        int counter = 0;
        ArrayList<String> prereqList = new ArrayList<>();
        
        // loops through the list of planned courses
        for(Attempt fromPlan : pos.getPlannedList()) {
            counter = 0;
            output += String.format("%-" + 9 + "." + 9 + "s", fromPlan.getCourseAttempted().getCourseCode()) + " - " +
                    String.format("%-" + 50 + "." + 50 + "s", fromPlan.getCourseAttempted().getCourseTitle());
            
            // loops through all prerequisite courses for each planned course
            for(Course prereq : fromPlan.getCourseAttempted().getPrerequisites()) {
                if(counter == 0) {
                    output += "\t";
                } else {
                    output += ", ";
                }
                output += prereq.getCourseCode();
                counter++;
                
                // add to prerequisites list if it's not already there
                if(!prereqList.contains(prereq.getCourseCode() + "\t" + prereq.getCourseTitle())) {
                    prereqList.add(prereq.getCourseCode() + "\t" + prereq.getCourseTitle());
                }
            }
            output += "\n";
        }
        output += headerDivide;
        
        // add prerequisites list to the output
        output += "\nSummary List of Prerequisite Courses that must be taken in order to take the courses that are planned:\n";
        for(String s : prereqList) {
            output += "\n" + s;
        }
        
        if(pos.getPlannedList().isEmpty()) {
            output += "\nThere are no planned course attempts";
        }
        
        return output + "\n";
    }
    
    /**
     * Calculates the overall GPA of a Student using their transcript (as a percentage)
     * @param pos the Student's PlanOfStudy
     * @return the Student's overall GPA as a percentage
     */
    public static Double calcOverallGPA(PlanOfStudy pos)
    {
        double sum = 0;
        int totalCourses = 0;
        for(Attempt c : pos.getTranscript()) {
            // only counts course attempt if it's a number grade
            if(isDouble(c.getAttemptGrade())) {
                sum += Double.parseDouble(c.getAttemptGrade());
                totalCourses++;
            }
        }
        // check for divide by zero error
        if(totalCourses == 0) {
            return 0.0;
        } else {
            return (sum / (double)totalCourses);
        }
    }
    
    /**
     * Calculates the specific course subject's GPA for a Student using their transcript (as a percentage)
     * @param pos the Student's PlanOfStudy
     * @param subject the desired subject GPA (it's the first part of the course code, before the '*')
     * @return the Student's GPA for the given subject as a percentage
     */
    public static Double calcSubjectGPA(PlanOfStudy pos, String subject)
    {
        String codeSplit[];
        double sum = 0;
        int totalCourses = 0;
        for(Attempt c : pos.getTranscript()) {
            // split course code to get subject
            codeSplit = c.getCourseAttempted().getCourseCode().split("\\*");
            // only counts course attempt if it's the right subject and has a number grade
            if(codeSplit[0].equals(subject) && isDouble(c.getAttemptGrade())) {
                sum += Double.parseDouble(c.getAttemptGrade());
                totalCourses++;
            }
        }
        // check for divide by zero error
        if(totalCourses == 0) {
            return 0.0;
        } else {
            return (sum / (double)totalCourses);
        }
    }
    
    /**
     * Calculates the overall GPA of a Student's most recent 10 credits (if applicable) using their transcript (as a percentage)
     * @param pos the Student's PlanOfStudy
     * @return the Student's overall GPA for their most recent 10 credits as a percentage
     */
    public static Double calcGPA10MostRecent(PlanOfStudy pos)
    {
        // account for if less than 10 credits have been earned
        double sumCredits = 0.0;
        double sum = 0.0;
        int totalCourses = 0;
        Attempt fromTranscript;
        
        int i = 0;
        while(sumCredits < 10.0 && i < pos.getTranscript().size()) {
            fromTranscript = pos.getTranscript().get(i);
            // only counts course attempt if it's a number grade
            if(isDouble(fromTranscript.getAttemptGrade())) {
                sum += Double.parseDouble(fromTranscript.getAttemptGrade());
                sumCredits += fromTranscript.getCourseAttempted().getCourseCredit();
                totalCourses++;
            }
            i++;
        }
        // check for divide by zero error
        if(totalCourses == 0) {
            return 0.0;
        } else {
            return (sum / (double)totalCourses);
        }
    }
    
    /**
     * Helper method to set the enabled parameter of a group of components
     * @param tf boolean to decide if everything is enabled or not
     */
    public void setEnabledAll(boolean tf)
    {
        // save components
        btnSave.setEnabled(tf);
        itmSave.setEnabled(tf);
        // menu components
        mnuView.setEnabled(tf);
        mnuDisplay.setEnabled(tf);
        
        // maintain course attempts panel components
        pnlMaintainAttempts.setEnabled(tf);
        lblSubject.setEnabled(tf);
        cboSubject.setEnabled(tf);
        lblCode.setEnabled(tf);
        txtCode.setEnabled(tf);
        lblStatus.setEnabled(tf);
        cboStatus.setEnabled(tf);
        lblGrade.setEnabled(tf);
        txtGrade.setEnabled(tf);
        lblType.setEnabled(tf);
        cboType.setEnabled(tf);
        lblSemester.setEnabled(tf);
        cboSemester.setEnabled(tf);
        txtSemesterYear.setEnabled(tf);
        // buttons for user info panel
        btnAddToTranscript.setEnabled(tf);
        btnRemFromTranscript.setEnabled(tf);
        btnUpdateGrade.setEnabled(tf);
        btnAddToPlanned.setEnabled(tf);
        btnRemFromPlanned.setEnabled(tf);
        
        // degree, major, requirements panel components
        pnlDegreeMajorRequirements.setEnabled(tf);
        cboDegreeMajor.setEnabled(tf);
        // buttons for degree, major, requirements panel
        btnSelectDegreeMajor.setEnabled(tf);
        btnMeetsRequirements.setEnabled(tf);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barMenu;
    private javax.swing.JButton btnAddToPlanned;
    private javax.swing.JButton btnAddToTranscript;
    private javax.swing.JButton btnLoadSave;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnMeetsRequirements;
    private javax.swing.JButton btnRemFromPlanned;
    private javax.swing.JButton btnRemFromTranscript;
    private javax.swing.JButton btnSelectDegreeMajor;
    private javax.swing.JButton btnStartOver;
    private javax.swing.JButton btnUpdateGrade;
    private javax.swing.JComboBox<String> cboDegreeMajor;
    private javax.swing.JComboBox<String> cboSemester;
    private javax.swing.JComboBox<String> cboStatus;
    private javax.swing.JComboBox<String> cboSubject;
    private javax.swing.JComboBox<String> cboType;
    private javax.swing.JMenuItem itmAdmin;
    private javax.swing.JMenuItem itmDisplayPlannedList;
    private javax.swing.JMenuItem itmDisplayProfile;
    private javax.swing.JMenuItem itmDisplayTranscript;
    private javax.swing.JMenuItem itmExit;
    private javax.swing.JMenuItem itmGPA;
    private javax.swing.JMenuItem itmLMRCAll;
    private javax.swing.JMenuItem itmLMRCTranscript;
    private javax.swing.JMenuItem itmLPCPlanned;
    private javax.swing.JMenuItem itmLPCReqCourses;
    private javax.swing.JMenuItem itmNumCredits;
    private javax.swing.JMenuItem itmSave;
    private javax.swing.JMenuItem itmViewPlanBySemester;
    private javax.swing.JLabel lblCode;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblGrade;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStudentID;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblType;
    private javax.swing.JMenu mnuDisplay;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuListMissingReqCourses;
    private javax.swing.JMenu mnuListPrereqCourses;
    private javax.swing.JMenu mnuOptions;
    private javax.swing.JMenu mnuView;
    private javax.swing.JPanel pnlDegreeMajorRequirements;
    private javax.swing.JPanel pnlMaintainAttempts;
    private javax.swing.JPanel pnlSaveExit;
    private javax.swing.JPanel pnlUserInfo;
    private javax.swing.JScrollPane scrDisplay;
    private javax.swing.JPopupMenu.Separator sepFile;
    private javax.swing.JPopupMenu.Separator sepView;
    private javax.swing.JTextArea txtADisplay;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtGrade;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtSemesterYear;
    private javax.swing.JTextField txtStudentID;
    // End of variables declaration//GEN-END:variables
    // my extra variables
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnExit;
    
    /**
     * Custom Button Listener class for save buttons -> saves when action is performed
     */
    private class SaveButtonListener implements java.awt.event.ActionListener
    {
        private javax.swing.JButton button;
        
        SaveButtonListener(javax.swing.JButton b)
        {
            button = b;
        }
        
        @Override
        public void actionPerformed(ActionEvent ae)
        {
            JOptionPane.showMessageDialog(null, "Your progress has been saved.\n"
                    + theUser.getLastName() + theUser.getFirstName() + theUser.getStudentNumber() + ".bin"
                    , getTitle(), JOptionPane.INFORMATION_MESSAGE);
            theUser.saveState(theUser.getLastName() + theUser.getFirstName() + theUser.getStudentNumber() + ".bin");
        }
    }
    
    // =========================================================================
    
    /**
     * Accessor method - Retrieves the Student user
     * @return the Student user
     */
    public Student getUser()
    {
        return theUser;
    }
    
    /**
     * Accessor method - Retrieves the combo box used for selecting the degree/major
     * @return 
     */
    public javax.swing.JComboBox<String> getDegreeMajorComboBox() {
        return cboDegreeMajor;
    }
    
    /**
     * Boolean method - Checks if a string is an integer
     * @param sNum the string form of the number being checked
     * @return true if it successfully parses to an integer
     */
    public static boolean isInteger(String sNum)
    {
        try {
            Integer.parseInt(sNum);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    /**
     * Boolean method - Checks if a string is a double
     * @param sNum the string form of the number being checked
     * @return true if it successfully parses to a double
     */
    public static boolean isDouble(String sNum)
    {
        try {
            Double.parseDouble(sNum);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    // =========================================================================
    
    /**
     * File Read method - loads a CSV that contains the list of required courses for each major
     * @param filename the name of the CSV file being read from
     * @return a HashMap with a String key of the Major, and a value of an ArrayList of Strings of required course codes
     */
    public static HashMap<String, ArrayList<String>> loadRequiredCourses(String filename)
    {
        HashMap<String, ArrayList<String>> degKeyReqCourseList = new HashMap<>();
        
        boolean encounteredErrors = false;
        String output = "";
        // declare variables
        boolean eof = false;
        boolean validInput = true;
        String line = "";
        String key, value;
        String lineSplit[];
        try {
            FileReader fr = new FileReader(filename);
            BufferedReader br = new BufferedReader(fr);
            eof = false;
            
            // read the entire file
            while(!eof) {
                line = br.readLine();
                // check if anything is there
                if(line == null) {
                    eof = true;
                } else {
                    validInput = true;
                    lineSplit = line.trim().split(",");
                    for(String s : lineSplit) {
                        s = s.trim();
                    }
                    
                    // check major
                    if(lineSplit[0].equals("")) {
                        output += "\nError: loadRequiredCourses(" + filename + "): major must exist";
                        encounteredErrors = true;
                        validInput = false;
                        continue; // do not add because it's invalid
                    } else {
                        key = lineSplit[0];
                    }
                    
                    // check that course codes are valid
                    String validRequired = ""; // stores a string to be split of all good input prereq courses
                    String codeSplit[];
                    int counter = 0;
                    for(int i = 1; i < lineSplit.length; i++) {
                        codeSplit = lineSplit[i].trim().split("\\*"); //break code into subject and number, clear extra whitespace
                        for(String s : codeSplit) {
                            s = s.trim();
                        }
                        // load potentially altered course code back
                        if(codeSplit.length > 1) {
                            for(int j = 0; j < codeSplit.length; j++) {
                                if(j == 0) {
                                    lineSplit[i] = codeSplit[j];
                                } else {
                                    lineSplit[i] += "*" + codeSplit[j];
                                }
                            }
                        }
                        
                        // now, check course code (length for subject and number)
                        if(codeSplit.length != 2 || codeSplit[0].length() < 3 || codeSplit[0].length() > 4 || 
                                codeSplit[1].length() != 4 || !isInteger(codeSplit[1])) {
                            output += "\nError: loadRequiredCourses(" + filename + "): required course code '" + lineSplit[i] + "' is invalid";
                            encounteredErrors = true;
                            validInput = false;
                            continue; //do not add as a prerequisite course because invalid course code format
                        }
                        
                        // if reaches here, then the required course is valid, so add it to the storing list
                        if(counter == 0) {
                            validRequired += lineSplit[i];
                        } else {
                            validRequired += ":" + lineSplit[i];
                        }                        
                        counter++; // accumulate since it was a good required course input
                    }
                    String validRequiredSplit[] = validRequired.split(":"); // break the good input required courses into separate course codes
                   
                    // if the input line was good, add it to the HashMap
                    if(validInput) {
                        // create array list to add
                        ArrayList<String> reqCourses = new ArrayList<>();
                        for(String reqCourseCode : validRequiredSplit) {
                            reqCourses.add(reqCourseCode);
                        }
                        degKeyReqCourseList.put(key, reqCourses); // add it to the map
                    }
                    
                } // end else
            } // end while loop
        } catch (IOException e) {
            output = "Error - loadRequiredCourses(" + filename + "): IOException -> " + e + "\n" + output;
            JOptionPane.showMessageDialog(null, "Errors encountered - loadRequiredCourses(" + filename + "):\n\n" + output,
                    "CIS*2430: Planner Assignment 2", JOptionPane.ERROR_MESSAGE);
        }
        if(encounteredErrors) {
            JOptionPane.showMessageDialog(null, "Errors encountered - loadRequiredCourses(" + filename + "):\n" + output,
                    "CIS*2430: Planner Assignment 2", JOptionPane.ERROR_MESSAGE);
        }
        return degKeyReqCourseList;
    }
    /**
     * File Write method - writes a binary file that contains the list of required courses for each major
     * @param degKeyReqCourseList the HashMap collection object being written
     */
    public static void saveRequiredCourses(HashMap<String, ArrayList<String>> degKeyReqCourseList)
    {
        try {
            FileOutputStream fout = new FileOutputStream("degreeList.bin");
            ObjectOutputStream out = new ObjectOutputStream(fout);
            
            out.writeObject(degKeyReqCourseList);
            
            // close streams
            out.close();
            fout.close();
            
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error - saveRequiredCourses: IOException -> " + e,
                    "CIS*2430: Planner Assignment 2", JOptionPane.ERROR_MESSAGE);
        }
    }
}
